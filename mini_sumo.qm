<?xml version="1.0" encoding="UTF-8"?>
<model version="4.0.3" links="0">
 <documentation>Simple model template for QP-nano</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Sumo" superclass="qpn::QActive">
   <attribute name="combat_mode" type="int8_t" visibility="0x02" properties="0x00"/>
   <attribute name="last_edge" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="attacking" type="uint8_t" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="6,4,5,0,8,4">
      <action box="0,-2,13,2"/>
     </initial_glyph>
    </initial>
    <state name="wait">
     <entry brief="timeout = 0.5s">QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);</entry>
     <tran trig="Q_TIMEOUT">
      <action brief="toggle led">BSP_ToggleLed();</action>
      <tran_glyph conn="4,15,3,-1,14">
       <action box="0,-2,12,4"/>
      </tran_glyph>
     </tran>
     <tran trig="BUTTON" target="../../2">
      <action brief="timeout = 5s">QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC*5 - 1, BSP_TICKS_PER_SEC*5 - 1);</action>
      <tran_glyph conn="4,20,3,3,23,-10,3">
       <action box="0,-2,10,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,8,20,14">
      <entry box="1,2,12,2"/>
     </state_glyph>
    </state>
    <state name="hold">
     <entry brief="led on">BSP_LedOn();</entry>
     <exit brief="led off">BSP_LedOff();</exit>
     <tran trig="Q_TIMEOUT" target="../../3">
      <tran_glyph conn="30,20,3,1,69,6,-3">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="30,8,20,14">
      <entry box="1,2,9,2"/>
      <exit box="1,4,9,2"/>
     </state_glyph>
    </state>
    <state name="combat">
     <entry brief="timeout = 40ms">QActive_armX((QActive *)me, 0, BSP_TICKS_PER_SEC*2/50, BSP_TICKS_PER_SEC*2/50);</entry>
     <initial target="../4">
      <initial_glyph conn="8,30,5,0,16,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="EDGE">
      <choice target="../../../4">
       <guard brief="may_go_back">!(me-&gt;attacking) || (me-&gt;attacking &amp;&amp; (me-&gt;last_edge == 0))</guard>
       <choice_glyph conn="30,92,4,3,4,70">
        <action box="0,2,13,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard>else</guard>
       <choice_glyph conn="30,92,4,-1,-4,11">
        <action box="0,-4,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,92,3,-1,26">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT">
      <action brief="toggle led">BSP_ToggleLed();
if (BSP_ReadOpSensors(me)) {
    QACTIVE_POST(&amp;(me-&gt;super), LOST_SIG, 0);
}</action>
      <tran_glyph conn="4,96,3,-1,12">
       <action box="0,-2,11,4"/>
      </tran_glyph>
     </tran>
     <state name="normal">
      <exit>BSP_Stop();</exit>
      <initial target="../1">
       <initial_glyph conn="50,38,5,0,6,2">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <state name="search">
       <entry>BSP_GoForward();</entry>
       <tran trig="LEFT">
        <action>BSP_TurnSpeed(Q_PAR(me), LEFT);</action>
        <choice target="../../../2/3">
         <guard brief="too_close">Q_PAR(me) &gt; 51</guard>
         <choice_glyph conn="54,46,5,3,12,-2,4">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard>else</guard>
         <action>BSP_TurnSpeed(Q_PAR(me), LEFT);</action>
         <choice_glyph conn="54,46,4,-1,-2,4">
          <action box="-1,-4,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="48,46,3,-1,6">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="RIGHT">
        <action>BSP_TurnSpeed(Q_PAR(me), RIGHT);</action>
        <choice target="../../../2/2">
         <guard brief="too_close">Q_PAR(me) &gt; 51</guard>
         <choice_glyph conn="54,52,5,3,16">
          <action box="1,-2,10,2"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard>else</guard>
         <action>BSP_TurnSpeed(Q_PAR(me), RIGHT);</action>
         <choice_glyph conn="54,52,4,-1,2,4">
          <action box="-1,2,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="48,52,3,-1,6">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="FRONT" target="../../3">
        <tran_glyph conn="50,58,2,0,8">
         <action box="-2,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="48,40,16,18">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="evade">
       <exit>//BSP_Stop();</exit>
       <tran trig="LOST" target="../../4">
        <tran_glyph conn="90,58,2,1,8,-4">
         <action box="-5,0,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="FRONT" target="../../1">
        <tran_glyph conn="72,58,2,2,2,-10,-2">
         <action box="-2,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state name="evade_right">
        <entry>BSP_TurnRight();</entry>
        <state_glyph node="70,50,10,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="evade_left">
        <entry>BSP_TurnLeft();</entry>
        <state_glyph node="70,42,10,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="68,38,24,20">
        <exit box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="attack">
       <entry>me-&gt;attacking = 1;
BSP_GoForward();</entry>
       <exit>me-&gt;attacking = 0;</exit>
       <tran trig="LOST" target="../../1">
        <tran_glyph conn="64,72,1,2,2,-8,-12,-6">
         <action box="-5,-2,8,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="48,66,16,12">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state name="evaded">
       <entry>BSP_SetTimer1(500);</entry>
       <exit>BSP_Stop();</exit>
       <tran trig="TIMER1OVF, RIGHT, LEFT, FRONT" target="../../1">
        <tran_glyph conn="76,66,3,2,-8,-4,-10,-4">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="76,60,10,8">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="46,32,48,48">
       <exit box="1,2,16,2"/>
      </state_glyph>
     </state>
     <state name="start">
      <exit>BSP_Stop();</exit>
      <initial target="../2">
       <initial_glyph conn="10,36,5,0,4,2">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <tran trig="FRONT, TIMER1OVF" target="../../3">
       <tran_glyph conn="6,82,3,3,37,-28,3">
        <action box="0,-2,20,2"/>
       </tran_glyph>
      </tran>
      <state name="read">
       <entry>BSP_ReadMode(me);
if (BSP_ReadOpSensors(me)) {
    QACTIVE_POST(&amp;(me-&gt;super), BACK_SIG, 0);
}</entry>
       <tran trig="RIGHT" target="../../5">
        <tran_glyph conn="8,48,3,3,16,-8,2">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="LEFT" target="../../4">
        <tran_glyph conn="8,50,3,3,16,12,2">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="BACK" target="../../3">
        <tran_glyph conn="8,52,3,1,14,10,-2">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="8,38,12,16">
        <entry box="1,2,10,2"/>
       </state_glyph>
      </state>
      <state name="is_back">
       <entry>/*switch (me-&gt;combat_mode) {
    case 0x00:
        break;
    case 0x03:
        break;
    default:
        break;
}*/
BSP_TurnLeft();
BSP_SetTimer1(1000);</entry>
       <state_glyph node="8,60,12,18">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="is_left">
       <entry>switch (me-&gt;combat_mode) {
    case 0x00:
        BSP_TurnLeft();
        BSP_SetTimer1(660);
        break;
    case 0x03:
        BSP_TurnSpeed(40, LEFT);
        //BSP_SetTimer1(660);
        break;
    default:
        BSP_TurnLeft();
        BSP_SetTimer1(660);
        break;
}
//BSP_TurnLeft();
//BSP_SetTimer1(660);</entry>
       <state_glyph node="26,60,12,18">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="is_right">
       <entry>switch (me-&gt;combat_mode) {
    case 0x00:
        BSP_TurnRight();
        BSP_SetTimer1(660);
        break;
    case 0x03:
        BSP_TurnSpeed(40, RIGHT);
        //BSP_SetTimer1(660);
        break;
    default:
        BSP_TurnRight();
        BSP_SetTimer1(660);
        break;
}
//BSP_TurnRight();
//BSP_SetTimer1(660);</entry>
       <state_glyph node="26,38,12,18">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="6,32,34,52">
       <exit box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="turn">
      <entry>if (me-&gt;last_edge == 0x01) {
    BSP_TurnRight();
}
else {
    BSP_TurnLeft();
}
BSP_SetTimer1(500);</entry>
      <exit>BSP_Stop();</exit>
      <tran trig="TIMER1OVF, FRONT, RIGHT, LEFT" target="../../3">
       <tran_glyph conn="68,88,1,2,6,-8">
        <action box="-9,-2,9,6"/>
       </tran_glyph>
      </tran>
      <state_glyph node="56,82,12,12">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="4,24,92,74">
      <entry box="1,2,13,2"/>
     </state_glyph>
    </state>
    <state name="edge">
     <initial target="../2">
      <initial_glyph conn="104,70,5,0,4,2">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="INSIDE" target="../../3/5">
      <tran_glyph conn="100,86,3,1,-6,6,-26">
       <action box="0,-1,10,2"/>
      </tran_glyph>
     </tran>
     <state name="back">
      <entry>BSP_GoBack();
BSP_delay_ms(250);
QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);</entry>
      <tran trig="Q_TIMEOUT" target="../../3">
       <tran_glyph conn="102,82,3,1,14,8,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="102,72,12,12">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="strafe">
      <entry>BSP_GoBack();</entry>
      <state_glyph node="102,88,12,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="100,66,18,32"/>
    </state>
    <state_diagram size="122,102"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="sumo.c">
   <text>#include &quot;qpn.h&quot;
#include &quot;bsp.h&quot;

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Sumo)
//...</text>
  </file>
  <file name="sumo.h">
   <text>#ifndef sumo_h
#define sumo_h

#include &quot;qpn.h&quot;

enum SumoSignals {
    BUTTON_SIG = Q_USER_SIG,
    EDGE_SIG,
    INSIDE_SIG,
    LEFT_SIG,
    FRONT_SIG,
    RIGHT_SIG,
    BACK_SIG,
    LOST_SIG,
    TIMER1OVF_SIG,
};

//============================================================================
// declare all AO classes...
$declare(AOs::Sumo)
//...

#endif /* sumo_h */</text>
  </file>
 </directory>
</model>
