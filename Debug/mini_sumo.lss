
mini_sumo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000013ae  00001442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800110  00800110  00001452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  00001482  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033e7  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d8f  00000000  00000000  00004ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000aca  00000000  00000000  00005848  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000648  00000000  00000000  00006314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000080a  00000000  00000000  0000695c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000224e  00000000  00000000  00007166  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  000093b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_3>
      10:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_4>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_7>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000068 <QF_active>:
      68:	00 00 00 00 00 38 01 10 01 14                       .....8....

00000072 <Q_this_module_>:
      72:	71 65 70 6e 00                                      qepn.

00000077 <QF_log2Lkup>:
      77:	00 01 02 02 03 03 03 03 04 04 04 04 04 04 04 04     ................

00000087 <Q_this_module_>:
      87:	71 66 6e 00                                         qfn.

0000008b <Q_this_module_>:
      8b:	71 76 6e 00 00                                      qvn..

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	ee ea       	ldi	r30, 0xAE	; 174
      a4:	f3 e1       	ldi	r31, 0x13	; 19
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 31       	cpi	r26, 0x10	; 16
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 e1       	ldi	r26, 0x10	; 16
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 34       	cpi	r26, 0x4D	; 77
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 38 01 	call	0x270	; 0x270 <main>
      c6:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <BSP_InitGPIO>:
#include "bsp.h"
#include "sumo.h"

void BSP_InitGPIO() {
	// set I/O pins
	DDRB = (1<<A_IN_1) | (1<<B_IN_2) | (1<<LED);
      ce:	83 e2       	ldi	r24, 0x23	; 35
      d0:	84 b9       	out	0x04, r24	; 4
	DDRD = (1<<A_IN_2) | (1<<B_IN_1);
      d2:	80 e9       	ldi	r24, 0x90	; 144
      d4:	8a b9       	out	0x0a, r24	; 10

	// set pull up resistors
	PORTD = (1<<DS_L) | (1<<DS_R);
      d6:	8c e0       	ldi	r24, 0x0C	; 12
      d8:	8b b9       	out	0x0b, r24	; 11
	PORTB = (1<<PBUT);
      da:	84 e0       	ldi	r24, 0x04	; 4
      dc:	85 b9       	out	0x05, r24	; 5

	// set pin change interrupt
	PCICR = (1<<PCIE1) | (1<<PCIE0);
      de:	93 e0       	ldi	r25, 0x03	; 3
      e0:	90 93 68 00 	sts	0x0068, r25
	PCMSK0 = (1<<PBUT);
      e4:	80 93 6b 00 	sts	0x006B, r24
	PCMSK1 = (1<<ES_L) | (1<<ES_R);
      e8:	80 e3       	ldi	r24, 0x30	; 48
      ea:	80 93 6c 00 	sts	0x006C, r24
      ee:	08 95       	ret

000000f0 <BSP_InitTimer0>:
}

void BSP_InitTimer0() {
	// set pwm pins
	DDRD |= (1<<PWM_A_PIN) | (1<<PWM_B_PIN);
      f0:	8a b1       	in	r24, 0x0a	; 10
      f2:	80 66       	ori	r24, 0x60	; 96
      f4:	8a b9       	out	0x0a, r24	; 10

	// set phase correct pwm mode, no prescaler
	TCCR0A = (1<<COM0A1) | (1<<COM0B1) | (1<<WGM00);
      f6:	81 ea       	ldi	r24, 0xA1	; 161
      f8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00);
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	85 bd       	out	0x25, r24	; 37

	// clear pwm
	PWM_A = 0x00;
      fe:	17 bc       	out	0x27, r1	; 39
	PWM_B = 0x00;
     100:	18 bc       	out	0x28, r1	; 40
     102:	08 95       	ret

00000104 <BSP_InitADC>:
}

void BSP_InitADC() {
	PRR &= ~(1<<PRADC);
     104:	e4 e6       	ldi	r30, 0x64	; 100
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	80 81       	ld	r24, Z
     10a:	8e 7f       	andi	r24, 0xFE	; 254
     10c:	80 83       	st	Z, r24
	ADMUX = (1<<REFS0) | (1<<ADLAR);
     10e:	80 e6       	ldi	r24, 0x60	; 96
     110:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     114:	87 e8       	ldi	r24, 0x87	; 135
     116:	80 93 7a 00 	sts	0x007A, r24
	DIDR0 = (1<<ADC2D) | (1<<ADC1D) | (1<<ADC0D);
     11a:	87 e0       	ldi	r24, 0x07	; 7
     11c:	80 93 7e 00 	sts	0x007E, r24
     120:	08 95       	ret

00000122 <BSP_SetTimer1>:
}

void BSP_SetTimer1(uint16_t ms) {
	TIMSK1 = (1<<TOIE1);
     122:	21 e0       	ldi	r18, 0x01	; 1
     124:	20 93 6f 00 	sts	0x006F, r18
	TIFR1 = (1<<TOV1);
     128:	26 bb       	out	0x16, r18	; 22
	TCNT1 = 65535 - (125 * ms) / 2;
     12a:	2d e7       	ldi	r18, 0x7D	; 125
     12c:	ac 01       	movw	r20, r24
     12e:	24 9f       	mul	r18, r20
     130:	c0 01       	movw	r24, r0
     132:	25 9f       	mul	r18, r21
     134:	90 0d       	add	r25, r0
     136:	11 24       	eor	r1, r1
     138:	96 95       	lsr	r25
     13a:	87 95       	ror	r24
     13c:	80 95       	com	r24
     13e:	90 95       	com	r25
     140:	90 93 85 00 	sts	0x0085, r25
     144:	80 93 84 00 	sts	0x0084, r24
	TCCR1B = (1<<CS12);
     148:	84 e0       	ldi	r24, 0x04	; 4
     14a:	80 93 81 00 	sts	0x0081, r24
     14e:	08 95       	ret

00000150 <BSP_ToggleLed>:
}

void BSP_ToggleLed() {
	PINB |= (1<<LED);
     150:	1d 9a       	sbi	0x03, 5	; 3
     152:	08 95       	ret

00000154 <BSP_LedOn>:
}

void BSP_LedOn() {
	PORTB |= (1<<LED);
     154:	2d 9a       	sbi	0x05, 5	; 5
     156:	08 95       	ret

00000158 <BSP_LedOff>:
}

void BSP_LedOff() {
	PORTB &= ~(1<<LED);
     158:	2d 98       	cbi	0x05, 5	; 5
     15a:	08 95       	ret

0000015c <BSP_Stop>:
}

void BSP_Stop() {
	PORTD |= (1<<A_IN_2);
     15c:	5c 9a       	sbi	0x0b, 4	; 11
	PORTB |= (1<<A_IN_1);
     15e:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<B_IN_2);
     160:	28 9a       	sbi	0x05, 0	; 5
	PORTD |= (1<<B_IN_1);
     162:	5f 9a       	sbi	0x0b, 7	; 11
	PWM_A = 0x00;
     164:	17 bc       	out	0x27, r1	; 39
	PWM_B = 0x00;
     166:	18 bc       	out	0x28, r1	; 40
     168:	08 95       	ret

0000016a <BSP_GoForward>:
}

void BSP_GoForward() {
	PORTD |= (1<<A_IN_2);
     16a:	5c 9a       	sbi	0x0b, 4	; 11
	PORTB &= ~(1<<A_IN_1);
     16c:	29 98       	cbi	0x05, 1	; 5
	PORTB |= (1<<B_IN_2);
     16e:	28 9a       	sbi	0x05, 0	; 5
	PORTD &= ~(1<<B_IN_1);
     170:	5f 98       	cbi	0x0b, 7	; 11
	PWM_A = 0xFF;
     172:	8f ef       	ldi	r24, 0xFF	; 255
     174:	87 bd       	out	0x27, r24	; 39
	PWM_B = 0xC0;
     176:	80 ec       	ldi	r24, 0xC0	; 192
     178:	88 bd       	out	0x28, r24	; 40
     17a:	08 95       	ret

0000017c <BSP_GoBack>:
}

void BSP_GoBack() {
	PORTD &= ~(1<<A_IN_2);
     17c:	5c 98       	cbi	0x0b, 4	; 11
	PORTB |= (1<<A_IN_1);
     17e:	29 9a       	sbi	0x05, 1	; 5
	PORTB &= ~(1<<B_IN_2);
     180:	28 98       	cbi	0x05, 0	; 5
	PORTD |= (1<<B_IN_1);
     182:	5f 9a       	sbi	0x0b, 7	; 11
	PWM_A = 0xFF;
     184:	8f ef       	ldi	r24, 0xFF	; 255
     186:	87 bd       	out	0x27, r24	; 39
	PWM_B = 0xC0;
     188:	80 ec       	ldi	r24, 0xC0	; 192
     18a:	88 bd       	out	0x28, r24	; 40
     18c:	08 95       	ret

0000018e <BSP_TurnRight>:
}

void BSP_TurnRight() {
	PORTD |= (1<<A_IN_2);
     18e:	5c 9a       	sbi	0x0b, 4	; 11
	PORTB &= ~(1<<A_IN_1);
     190:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<B_IN_2);
     192:	28 98       	cbi	0x05, 0	; 5
	PORTD |= (1<<B_IN_1);
     194:	5f 9a       	sbi	0x0b, 7	; 11
	PWM_A = 0xFF;
     196:	8f ef       	ldi	r24, 0xFF	; 255
     198:	87 bd       	out	0x27, r24	; 39
	PWM_B = 0xFF;
     19a:	88 bd       	out	0x28, r24	; 40
     19c:	08 95       	ret

0000019e <BSP_TurnLeft>:
}

void BSP_TurnLeft() {
	PORTD &= ~(1<<A_IN_2);
     19e:	5c 98       	cbi	0x0b, 4	; 11
	PORTB |= (1<<A_IN_1);
     1a0:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<B_IN_2);
     1a2:	28 9a       	sbi	0x05, 0	; 5
	PORTD &= ~(1<<B_IN_1);
     1a4:	5f 98       	cbi	0x0b, 7	; 11
	PWM_A = 0xFF;
     1a6:	8f ef       	ldi	r24, 0xFF	; 255
     1a8:	87 bd       	out	0x27, r24	; 39
	PWM_B = 0xFF;
     1aa:	88 bd       	out	0x28, r24	; 40
     1ac:	08 95       	ret

000001ae <BSP_TurnSpeed>:

void BSP_TurnSpeed(uint8_t offset, uint8_t dir) {
	uint16_t b_speed;
	uint8_t diff;

	diff = offset * 5;
     1ae:	98 2f       	mov	r25, r24
     1b0:	99 0f       	add	r25, r25
     1b2:	99 0f       	add	r25, r25
     1b4:	89 0f       	add	r24, r25
	b_speed = 0xFF - (diff & ~dir);
     1b6:	28 2f       	mov	r18, r24
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	46 2f       	mov	r20, r22
     1bc:	50 e0       	ldi	r21, 0x00	; 0
     1be:	40 95       	com	r20
     1c0:	50 95       	com	r21
     1c2:	42 23       	and	r20, r18
     1c4:	53 23       	and	r21, r19
     1c6:	2f ef       	ldi	r18, 0xFF	; 255
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	24 1b       	sub	r18, r20
     1cc:	35 0b       	sbc	r19, r21
	b_speed = b_speed * 3 / 4;
     1ce:	a9 01       	movw	r20, r18
     1d0:	44 0f       	add	r20, r20
     1d2:	55 1f       	adc	r21, r21
     1d4:	24 0f       	add	r18, r20
     1d6:	35 1f       	adc	r19, r21
	PORTD |= (1<<A_IN_2);
     1d8:	5c 9a       	sbi	0x0b, 4	; 11
	PORTB &= ~(1<<A_IN_1);
     1da:	29 98       	cbi	0x05, 1	; 5
	PORTB |= (1<<B_IN_2);
     1dc:	28 9a       	sbi	0x05, 0	; 5
	PORTD &= ~(1<<B_IN_1);
     1de:	5f 98       	cbi	0x0b, 7	; 11
	PWM_A = 0xFF - (diff & dir);
     1e0:	86 23       	and	r24, r22
     1e2:	80 95       	com	r24
     1e4:	87 bd       	out	0x27, r24	; 39
	uint16_t b_speed;
	uint8_t diff;

	diff = offset * 5;
	b_speed = 0xFF - (diff & ~dir);
	b_speed = b_speed * 3 / 4;
     1e6:	36 95       	lsr	r19
     1e8:	27 95       	ror	r18
     1ea:	36 95       	lsr	r19
     1ec:	27 95       	ror	r18
	PORTD |= (1<<A_IN_2);
	PORTB &= ~(1<<A_IN_1);
	PORTB |= (1<<B_IN_2);
	PORTD &= ~(1<<B_IN_1);
	PWM_A = 0xFF - (diff & dir);
	PWM_B = (uint8_t)b_speed;
     1ee:	28 bd       	out	0x28, r18	; 40
     1f0:	08 95       	ret

000001f2 <BSP_ReadMode>:
}

void BSP_ReadMode(Sumo * const me) {
	uint8_t read;
	read = PIND & ((1<<DS_L) | (1<<DS_R));
     1f2:	29 b1       	in	r18, 0x09	; 9
     1f4:	2c 70       	andi	r18, 0x0C	; 12
	read = read>>2;
     1f6:	26 95       	lsr	r18
     1f8:	26 95       	lsr	r18
	me->combat_mode = read;
     1fa:	fc 01       	movw	r30, r24
     1fc:	20 8b       	std	Z+16, r18	; 0x10
     1fe:	08 95       	ret

00000200 <BSP_ReadOpSensors>:
}

uint8_t BSP_ReadOpSensors(Sumo * const me) {
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
	uint8_t i, index = 0, active = 0;
	uint8_t static const min_range[] = {28, 39, 28};

	ADMUX &= 0xF0; 
     204:	ec e7       	ldi	r30, 0x7C	; 124
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	20 81       	ld	r18, Z
     20a:	20 7f       	andi	r18, 0xF0	; 240
     20c:	20 83       	st	Z, r18
	read = read>>2;
	me->combat_mode = read;
}

uint8_t BSP_ReadOpSensors(Sumo * const me) {
	uint8_t i, index = 0, active = 0;
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t static const min_range[] = {28, 39, 28};

	ADMUX &= 0xF0; 
	for (i = 0; i < 3; i++) {
     212:	50 e0       	ldi	r21, 0x00	; 0
		ADCSRA |= (1<<ADSC);
     214:	ea e7       	ldi	r30, 0x7A	; 122
     216:	f0 e0       	ldi	r31, 0x00	; 0
		while (ADCSRA & (1<< ADSC));
		if (ADCH > active) {
     218:	c9 e7       	ldi	r28, 0x79	; 121
     21a:	d0 e0       	ldi	r29, 0x00	; 0
			active = ADCH;
			index = i;
		}
		ADMUX++;
     21c:	ac e7       	ldi	r26, 0x7C	; 124
     21e:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t i, index = 0, active = 0;
	uint8_t static const min_range[] = {28, 39, 28};

	ADMUX &= 0xF0; 
	for (i = 0; i < 3; i++) {
		ADCSRA |= (1<<ADSC);
     220:	30 81       	ld	r19, Z
     222:	30 64       	ori	r19, 0x40	; 64
     224:	30 83       	st	Z, r19
		while (ADCSRA & (1<< ADSC));
     226:	30 81       	ld	r19, Z
     228:	36 fd       	sbrc	r19, 6
     22a:	fd cf       	rjmp	.-6      	; 0x226 <BSP_ReadOpSensors+0x26>
		if (ADCH > active) {
     22c:	38 81       	ld	r19, Y
     22e:	23 17       	cp	r18, r19
     230:	10 f4       	brcc	.+4      	; 0x236 <BSP_ReadOpSensors+0x36>
			active = ADCH;
     232:	28 81       	ld	r18, Y
     234:	45 2f       	mov	r20, r21
			index = i;
		}
		ADMUX++;
     236:	3c 91       	ld	r19, X
     238:	3f 5f       	subi	r19, 0xFF	; 255
     23a:	3c 93       	st	X, r19
uint8_t BSP_ReadOpSensors(Sumo * const me) {
	uint8_t i, index = 0, active = 0;
	uint8_t static const min_range[] = {28, 39, 28};

	ADMUX &= 0xF0; 
	for (i = 0; i < 3; i++) {
     23c:	5f 5f       	subi	r21, 0xFF	; 255
     23e:	53 30       	cpi	r21, 0x03	; 3
     240:	79 f7       	brne	.-34     	; 0x220 <BSP_ReadOpSensors+0x20>
			active = ADCH;
			index = i;
		}
		ADMUX++;
	}
	if (active > min_range[index]) {
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	fa 01       	movw	r30, r20
     246:	e0 50       	subi	r30, 0x00	; 0
     248:	ff 4f       	sbci	r31, 0xFF	; 255
     24a:	30 81       	ld	r19, Z
     24c:	32 17       	cp	r19, r18
     24e:	60 f4       	brcc	.+24     	; 0x268 <BSP_ReadOpSensors+0x68>
		QACTIVE_POST(&(me->super), LEFT_SIG + index, active);
     250:	dc 01       	movw	r26, r24
     252:	ed 91       	ld	r30, X+
     254:	fc 91       	ld	r31, X
     256:	45 5f       	subi	r20, 0xF5	; 245
     258:	5f 4f       	sbci	r21, 0xFF	; 255
     25a:	04 80       	ldd	r0, Z+4	; 0x04
     25c:	f5 81       	ldd	r31, Z+5	; 0x05
     25e:	e0 2d       	mov	r30, r0
     260:	6f ef       	ldi	r22, 0xFF	; 255
     262:	09 95       	icall
		return 0;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	01 c0       	rjmp	.+2      	; 0x26a <BSP_ReadOpSensors+0x6a>
	}
	return 1;
     268:	81 e0       	ldi	r24, 0x01	; 1
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <main>:
	{ (QActive *)&AO_Sumo,  l_sumoQSto,     Q_DIM(l_sumoQSto) }
};

int main(void)
{
	QF_init(Q_DIM(QF_active));
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <QF_init>
	QActive_ctor(&AO_Sumo.super, Q_STATE_CAST(&Sumo_initial));
     276:	6e ec       	ldi	r22, 0xCE	; 206
     278:	79 e0       	ldi	r23, 0x09	; 9
     27a:	88 e3       	ldi	r24, 0x38	; 56
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <QActive_ctor>

    while(1)
    {
        //TODO:: Please write your application code 
		QF_run();
     282:	0e 94 78 06 	call	0xcf0	; 0xcf0 <QF_run>
     286:	fd cf       	rjmp	.-6      	; 0x282 <main+0x12>

00000288 <__vector_7>:
    }
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
     288:	1f 92       	push	r1
     28a:	0f 92       	push	r0
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	7f 93       	push	r23
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
     2a2:	af 93       	push	r26
     2a4:	bf 93       	push	r27
     2a6:	ef 93       	push	r30
     2a8:	ff 93       	push	r31
	QF_tickXISR(0); // process time events for tick rate 0
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	0e 94 1c 06 	call	0xc38	; 0xc38 <QF_tickXISR>
}
     2b0:	ff 91       	pop	r31
     2b2:	ef 91       	pop	r30
     2b4:	bf 91       	pop	r27
     2b6:	af 91       	pop	r26
     2b8:	9f 91       	pop	r25
     2ba:	8f 91       	pop	r24
     2bc:	7f 91       	pop	r23
     2be:	6f 91       	pop	r22
     2c0:	5f 91       	pop	r21
     2c2:	4f 91       	pop	r20
     2c4:	3f 91       	pop	r19
     2c6:	2f 91       	pop	r18
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	0f 90       	pop	r0
     2ce:	1f 90       	pop	r1
     2d0:	18 95       	reti

000002d2 <__vector_13>:

ISR(TIMER1_OVF_vect) {
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	2f 93       	push	r18
     2de:	3f 93       	push	r19
     2e0:	4f 93       	push	r20
     2e2:	5f 93       	push	r21
     2e4:	6f 93       	push	r22
     2e6:	7f 93       	push	r23
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	af 93       	push	r26
     2ee:	bf 93       	push	r27
     2f0:	ef 93       	push	r30
     2f2:	ff 93       	push	r31
	TCCR1B &= ~(1<<CS12);
     2f4:	e1 e8       	ldi	r30, 0x81	; 129
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	8b 7f       	andi	r24, 0xFB	; 251
     2fc:	80 83       	st	Z, r24
	TIMSK1 &= ~(1<<TOIE1);
     2fe:	ef e6       	ldi	r30, 0x6F	; 111
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	8e 7f       	andi	r24, 0xFE	; 254
     306:	80 83       	st	Z, r24
	QACTIVE_POST_ISR(&AO_Sumo.super, TIMER1OVF_SIG, 0);
     308:	e0 91 38 01 	lds	r30, 0x0138
     30c:	f0 91 39 01 	lds	r31, 0x0139
     310:	06 80       	ldd	r0, Z+6	; 0x06
     312:	f7 81       	ldd	r31, Z+7	; 0x07
     314:	e0 2d       	mov	r30, r0
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	40 e1       	ldi	r20, 0x10	; 16
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	6f ef       	ldi	r22, 0xFF	; 255
     31e:	88 e3       	ldi	r24, 0x38	; 56
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	09 95       	icall
}
     324:	ff 91       	pop	r31
     326:	ef 91       	pop	r30
     328:	bf 91       	pop	r27
     32a:	af 91       	pop	r26
     32c:	9f 91       	pop	r25
     32e:	8f 91       	pop	r24
     330:	7f 91       	pop	r23
     332:	6f 91       	pop	r22
     334:	5f 91       	pop	r21
     336:	4f 91       	pop	r20
     338:	3f 91       	pop	r19
     33a:	2f 91       	pop	r18
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_3>:

ISR(PCINT0_vect) {
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
	if (~(PINB & (1<<PBUT))) {
     368:	83 b1       	in	r24, 0x03	; 3
		QACTIVE_POST_ISR(&AO_Sumo.super, BUTTON_SIG, 0);
     36a:	e0 91 38 01 	lds	r30, 0x0138
     36e:	f0 91 39 01 	lds	r31, 0x0139
     372:	06 80       	ldd	r0, Z+6	; 0x06
     374:	f7 81       	ldd	r31, Z+7	; 0x07
     376:	e0 2d       	mov	r30, r0
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	48 e0       	ldi	r20, 0x08	; 8
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	6f ef       	ldi	r22, 0xFF	; 255
     380:	88 e3       	ldi	r24, 0x38	; 56
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	09 95       	icall
	}
}
     386:	ff 91       	pop	r31
     388:	ef 91       	pop	r30
     38a:	bf 91       	pop	r27
     38c:	af 91       	pop	r26
     38e:	9f 91       	pop	r25
     390:	8f 91       	pop	r24
     392:	7f 91       	pop	r23
     394:	6f 91       	pop	r22
     396:	5f 91       	pop	r21
     398:	4f 91       	pop	r20
     39a:	3f 91       	pop	r19
     39c:	2f 91       	pop	r18
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_4>:

ISR(PCINT1_vect) {
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	2f 93       	push	r18
     3b4:	3f 93       	push	r19
     3b6:	4f 93       	push	r20
     3b8:	5f 93       	push	r21
     3ba:	6f 93       	push	r22
     3bc:	7f 93       	push	r23
     3be:	8f 93       	push	r24
     3c0:	9f 93       	push	r25
     3c2:	af 93       	push	r26
     3c4:	bf 93       	push	r27
     3c6:	ef 93       	push	r30
     3c8:	ff 93       	push	r31
	uint8_t line;

	line = (PINC & ((1<<ES_L) | (1<<ES_R)))>>4;
     3ca:	86 b1       	in	r24, 0x06	; 6
     3cc:	80 73       	andi	r24, 0x30	; 48
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	95 95       	asr	r25
     3d2:	87 95       	ror	r24
     3d4:	95 95       	asr	r25
     3d6:	87 95       	ror	r24
     3d8:	95 95       	asr	r25
     3da:	87 95       	ror	r24
     3dc:	95 95       	asr	r25
     3de:	87 95       	ror	r24
	if (line < 3) {
     3e0:	83 30       	cpi	r24, 0x03	; 3
     3e2:	88 f4       	brcc	.+34     	; 0x406 <__vector_4+0x5e>
		AO_Sumo.last_edge = line;
     3e4:	80 93 49 01 	sts	0x0149, r24
		QACTIVE_POST_ISR(&AO_Sumo.super, EDGE_SIG, 0);
     3e8:	e0 91 38 01 	lds	r30, 0x0138
     3ec:	f0 91 39 01 	lds	r31, 0x0139
     3f0:	06 80       	ldd	r0, Z+6	; 0x06
     3f2:	f7 81       	ldd	r31, Z+7	; 0x07
     3f4:	e0 2d       	mov	r30, r0
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	49 e0       	ldi	r20, 0x09	; 9
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	6f ef       	ldi	r22, 0xFF	; 255
     3fe:	88 e3       	ldi	r24, 0x38	; 56
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	09 95       	icall
     404:	0e c0       	rjmp	.+28     	; 0x422 <__vector_4+0x7a>
	} else {
		QACTIVE_POST_ISR(&AO_Sumo.super, INSIDE_SIG, 0);
     406:	e0 91 38 01 	lds	r30, 0x0138
     40a:	f0 91 39 01 	lds	r31, 0x0139
     40e:	06 80       	ldd	r0, Z+6	; 0x06
     410:	f7 81       	ldd	r31, Z+7	; 0x07
     412:	e0 2d       	mov	r30, r0
     414:	20 e0       	ldi	r18, 0x00	; 0
     416:	4a e0       	ldi	r20, 0x0A	; 10
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	6f ef       	ldi	r22, 0xFF	; 255
     41c:	88 e3       	ldi	r24, 0x38	; 56
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	09 95       	icall
	}
}
     422:	ff 91       	pop	r31
     424:	ef 91       	pop	r30
     426:	bf 91       	pop	r27
     428:	af 91       	pop	r26
     42a:	9f 91       	pop	r25
     42c:	8f 91       	pop	r24
     42e:	7f 91       	pop	r23
     430:	6f 91       	pop	r22
     432:	5f 91       	pop	r21
     434:	4f 91       	pop	r20
     436:	3f 91       	pop	r19
     438:	2f 91       	pop	r18
     43a:	0f 90       	pop	r0
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	0f 90       	pop	r0
     440:	1f 90       	pop	r1
     442:	18 95       	reti

00000444 <QF_onStartup>:

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
	// set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
	TCCR2A = (1U << WGM21) | (0U << WGM20);
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = (1U << CS22 ) | (1U << CS21) | (1U << CS20); // 1/2^10
     44a:	97 e0       	ldi	r25, 0x07	; 7
     44c:	90 93 b1 00 	sts	0x00B1, r25
	ASSR  &= ~(1U << AS2);
     450:	e6 eb       	ldi	r30, 0xB6	; 182
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	90 81       	ld	r25, Z
     456:	9f 7d       	andi	r25, 0xDF	; 223
     458:	90 83       	st	Z, r25
	TIMSK2 = (1U << OCIE2A); // enable TIMER2 compare Interrupt
     45a:	80 93 70 00 	sts	0x0070, r24
	TCNT2  = 0U;
     45e:	10 92 b2 00 	sts	0x00B2, r1

	// set the output-compare register based on the desired tick frequency
	OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
     462:	8d e4       	ldi	r24, 0x4D	; 77
     464:	80 93 b3 00 	sts	0x00B3, r24

	BSP_InitGPIO();
     468:	0e 94 67 00 	call	0xce	; 0xce <BSP_InitGPIO>
	BSP_InitTimer0();
     46c:	0e 94 78 00 	call	0xf0	; 0xf0 <BSP_InitTimer0>
	BSP_InitADC();
     470:	0e 94 82 00 	call	0x104	; 0x104 <BSP_InitADC>
     474:	08 95       	ret

00000476 <QV_onIdle>:
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
	// Put the CPU and peripherals to the low-power mode. You might
	// need to customize the clock management for your application,
	// see the datasheet for your particular AVR MCU.
	SMCR = (0 << SM0) | (1 << SE); // idle mode, adjust to your project
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	83 bf       	out	0x33, r24	; 51
	QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
     47a:	78 94       	sei
     47c:	88 95       	sleep
     47e:	13 be       	out	0x33, r1	; 51
     480:	08 95       	ret

00000482 <Q_onAssert>:
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
	// implement the error-handling policy for your application!!!
	QF_INT_DISABLE(); // disable all interrupts
     482:	f8 94       	cli
	QF_RESET();  // reset the CPU
     484:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     488:	08 95       	ret

0000048a <QHsm_top>:
* for conformance with the state-handler function signature ::QStateHandler.
*/
QState QHsm_top(void const * const me) {
    (void)me; /* suppress the "unused parameter" compiler warning */
    return (QState)Q_RET_IGNORED; /* the top state ignores all events */
}
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	08 95       	ret

0000048e <QHsm_init_>:
*
* @param[in,out] me pointer (see @ref oop)
*
* @note Must be called only ONCE after the QHsm_ctor().
*/
void QHsm_init_(QHsm * const me) {
     48e:	bf 92       	push	r11
     490:	cf 92       	push	r12
     492:	df 92       	push	r13
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	cd b7       	in	r28, 0x3d	; 61
     4a2:	de b7       	in	r29, 0x3e	; 62
     4a4:	2a 97       	sbiw	r28, 0x0a	; 10
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	8c 01       	movw	r16, r24
    QStateHandler t = me->state;
     4b2:	dc 01       	movw	r26, r24
     4b4:	12 96       	adiw	r26, 0x02	; 2
     4b6:	ed 90       	ld	r14, X+
     4b8:	fc 90       	ld	r15, X
     4ba:	13 97       	sbiw	r26, 0x03	; 3

    /** @pre the virtual pointer must be initialized, the top-most initial
    * transition must be initialized, and the initial transition must not
    * be taken yet.
    */
    Q_REQUIRE_ID(200, (me->vptr != (QHsmVtbl const *)0)
     4bc:	8d 91       	ld	r24, X+
     4be:	9c 91       	ld	r25, X
     4c0:	11 97       	sbiw	r26, 0x01	; 1
     4c2:	89 2b       	or	r24, r25
     4c4:	59 f0       	breq	.+22     	; 0x4dc <QHsm_init_+0x4e>
     4c6:	14 96       	adiw	r26, 0x04	; 4
     4c8:	8d 91       	ld	r24, X+
     4ca:	9c 91       	ld	r25, X
     4cc:	15 97       	sbiw	r26, 0x05	; 5
     4ce:	89 2b       	or	r24, r25
     4d0:	29 f0       	breq	.+10     	; 0x4dc <QHsm_init_+0x4e>
     4d2:	b5 e4       	ldi	r27, 0x45	; 69
     4d4:	eb 16       	cp	r14, r27
     4d6:	b2 e0       	ldi	r27, 0x02	; 2
     4d8:	fb 06       	cpc	r15, r27
     4da:	31 f0       	breq	.+12     	; 0x4e8 <QHsm_init_+0x5a>
     4dc:	68 ec       	ldi	r22, 0xC8	; 200
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	82 e7       	ldi	r24, 0x72	; 114
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>
                      && (me->temp != Q_STATE_CAST(0))
                      && (t == Q_STATE_CAST(&QHsm_top)));

    r = (*me->temp)(me); /* execute the top-most initial transition */
     4e8:	d8 01       	movw	r26, r16
     4ea:	14 96       	adiw	r26, 0x04	; 4
     4ec:	ed 91       	ld	r30, X+
     4ee:	fc 91       	ld	r31, X
     4f0:	15 97       	sbiw	r26, 0x05	; 5
     4f2:	c8 01       	movw	r24, r16
     4f4:	09 95       	icall

    /* the top-most initial transition must be taken */
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN);
     4f6:	88 30       	cpi	r24, 0x08	; 8
     4f8:	31 f0       	breq	.+12     	; 0x506 <QHsm_init_+0x78>
     4fa:	62 ed       	ldi	r22, 0xD2	; 210
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	82 e7       	ldi	r24, 0x72	; 114
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>

        path[0] = me->temp;
        Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
        (void)(*me->temp)(me);
        while (me->temp != t) {
            ++ip;
     506:	cc 24       	eor	r12, r12
     508:	c3 94       	inc	r12
            --ip;
        } while (ip >= (int_fast8_t)0);

        t = path[0]; /* current state becomes the new source */

        Q_SIG(me) = (QSignal)Q_INIT_SIG;
     50a:	0f 2e       	mov	r0, r31
     50c:	f3 e0       	ldi	r31, 0x03	; 3
     50e:	bf 2e       	mov	r11, r31
     510:	f0 2d       	mov	r31, r0
    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        int_fast8_t ip = (int_fast8_t)0; /* transition entry path index */

        path[0] = me->temp;
     512:	d8 01       	movw	r26, r16
     514:	14 96       	adiw	r26, 0x04	; 4
     516:	ed 91       	ld	r30, X+
     518:	fc 91       	ld	r31, X
     51a:	15 97       	sbiw	r26, 0x05	; 5
     51c:	fa 83       	std	Y+2, r31	; 0x02
     51e:	e9 83       	std	Y+1, r30	; 0x01
        Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
     520:	16 96       	adiw	r26, 0x06	; 6
     522:	1c 92       	st	X, r1
        (void)(*me->temp)(me);
     524:	c8 01       	movw	r24, r16
     526:	09 95       	icall
        while (me->temp != t) {
     528:	f8 01       	movw	r30, r16
     52a:	84 81       	ldd	r24, Z+4	; 0x04
     52c:	95 81       	ldd	r25, Z+5	; 0x05
     52e:	8e 15       	cp	r24, r14
     530:	9f 05       	cpc	r25, r15
     532:	39 f1       	breq	.+78     	; 0x582 <QHsm_init_+0xf4>
            ++ip;
     534:	dc 2c       	mov	r13, r12
     536:	0a c0       	rjmp	.+20     	; 0x54c <QHsm_init_+0xbe>
     538:	d3 94       	inc	r13
            Q_ASSERT_ID(220, ip < (int_fast8_t)Q_DIM(path));
     53a:	f4 e0       	ldi	r31, 0x04	; 4
     53c:	fd 15       	cp	r31, r13
     53e:	34 f4       	brge	.+12     	; 0x54c <QHsm_init_+0xbe>
     540:	6c ed       	ldi	r22, 0xDC	; 220
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	82 e7       	ldi	r24, 0x72	; 114
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>
            path[ip] = me->temp;
     54c:	d8 01       	movw	r26, r16
     54e:	14 96       	adiw	r26, 0x04	; 4
     550:	ed 91       	ld	r30, X+
     552:	fc 91       	ld	r31, X
     554:	15 97       	sbiw	r26, 0x05	; 5
     556:	ad 2d       	mov	r26, r13
     558:	aa 0f       	add	r26, r26
     55a:	bb 0b       	sbc	r27, r27
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	8c 0f       	add	r24, r28
     562:	9d 1f       	adc	r25, r29
     564:	a8 0f       	add	r26, r24
     566:	b9 1f       	adc	r27, r25
     568:	ed 93       	st	X+, r30
     56a:	fc 93       	st	X, r31
            (void)(*me->temp)(me);
     56c:	c8 01       	movw	r24, r16
     56e:	09 95       	icall
        int_fast8_t ip = (int_fast8_t)0; /* transition entry path index */

        path[0] = me->temp;
        Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
        (void)(*me->temp)(me);
        while (me->temp != t) {
     570:	d8 01       	movw	r26, r16
     572:	14 96       	adiw	r26, 0x04	; 4
     574:	8d 91       	ld	r24, X+
     576:	9c 91       	ld	r25, X
     578:	15 97       	sbiw	r26, 0x05	; 5
     57a:	8e 15       	cp	r24, r14
     57c:	9f 05       	cpc	r25, r15
     57e:	e1 f6       	brne	.-72     	; 0x538 <QHsm_init_+0xaa>
     580:	01 c0       	rjmp	.+2      	; 0x584 <QHsm_init_+0xf6>
    Q_ASSERT_ID(210, r == (QState)Q_RET_TRAN);

    /* drill down into the state hierarchy with initial transitions... */
    do {
        QStateHandler path[QHSM_MAX_NEST_DEPTH_];
        int_fast8_t ip = (int_fast8_t)0; /* transition entry path index */
     582:	d1 2c       	mov	r13, r1
            ++ip;
            Q_ASSERT_ID(220, ip < (int_fast8_t)Q_DIM(path));
            path[ip] = me->temp;
            (void)(*me->temp)(me);
        }
        me->temp = path[0];
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	f8 01       	movw	r30, r16
     58a:	95 83       	std	Z+5, r25	; 0x05
     58c:	84 83       	std	Z+4, r24	; 0x04

        /* retrace the entry path in reverse (desired) order... */
        Q_SIG(me) = (QSignal)Q_ENTRY_SIG;
     58e:	c6 82       	std	Z+6, r12	; 0x06
        do {
            (void)(*path[ip])(me); /* enter path[ip] */
     590:	ed 2d       	mov	r30, r13
     592:	ee 0f       	add	r30, r30
     594:	ff 0b       	sbc	r31, r31
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	8c 0f       	add	r24, r28
     59c:	9d 1f       	adc	r25, r29
     59e:	e8 0f       	add	r30, r24
     5a0:	f9 1f       	adc	r31, r25
     5a2:	01 90       	ld	r0, Z+
     5a4:	f0 81       	ld	r31, Z
     5a6:	e0 2d       	mov	r30, r0
     5a8:	c8 01       	movw	r24, r16
     5aa:	09 95       	icall
            --ip;
     5ac:	da 94       	dec	r13
        } while (ip >= (int_fast8_t)0);
     5ae:	84 f7       	brge	.-32     	; 0x590 <QHsm_init_+0x102>

        t = path[0]; /* current state becomes the new source */
     5b0:	e9 80       	ldd	r14, Y+1	; 0x01
     5b2:	fa 80       	ldd	r15, Y+2	; 0x02

        Q_SIG(me) = (QSignal)Q_INIT_SIG;
     5b4:	d8 01       	movw	r26, r16
     5b6:	16 96       	adiw	r26, 0x06	; 6
     5b8:	bc 92       	st	X, r11
        r = (*t)(me);
     5ba:	c8 01       	movw	r24, r16
     5bc:	f7 01       	movw	r30, r14
     5be:	09 95       	icall
    } while (r == (QState)Q_RET_TRAN);
     5c0:	88 30       	cpi	r24, 0x08	; 8
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <QHsm_init_+0x138>
     5c4:	a6 cf       	rjmp	.-180    	; 0x512 <QHsm_init_+0x84>

    me->state = t; /* change the current active state */
     5c6:	d8 01       	movw	r26, r16
     5c8:	13 96       	adiw	r26, 0x03	; 3
     5ca:	fc 92       	st	X, r15
     5cc:	ee 92       	st	-X, r14
     5ce:	12 97       	sbiw	r26, 0x02	; 2
    me->temp  = t; /* mark the configuration as stable */
     5d0:	15 96       	adiw	r26, 0x05	; 5
     5d2:	fc 92       	st	X, r15
     5d4:	ee 92       	st	-X, r14
     5d6:	14 97       	sbiw	r26, 0x04	; 4
}
     5d8:	2a 96       	adiw	r28, 0x0a	; 10
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	08 95       	ret

000005f8 <QHsm_dispatch_>:
*
* @note
* This function should be called only via the virtual table (see
* QHSM_DISPATCH()) and should NOT be called directly in the applications.
*/
void QHsm_dispatch_(QHsm * const me) {
     5f8:	8f 92       	push	r8
     5fa:	9f 92       	push	r9
     5fc:	af 92       	push	r10
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	2a 97       	sbiw	r28, 0x0a	; 10
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	8c 01       	movw	r16, r24
    QStateHandler t = me->state;
     622:	dc 01       	movw	r26, r24
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	ed 90       	ld	r14, X+
     628:	fc 90       	ld	r15, X
     62a:	13 97       	sbiw	r26, 0x03	; 3
    int_fast8_t iq; /* helper transition entry path index */

    /** @pre the current state must be initialized and
    * the state configuration must be stable
    */
    Q_REQUIRE_ID(400, (t != Q_STATE_CAST(0))
     62c:	e1 14       	cp	r14, r1
     62e:	f1 04       	cpc	r15, r1
     630:	39 f0       	breq	.+14     	; 0x640 <QHsm_dispatch_+0x48>
     632:	14 96       	adiw	r26, 0x04	; 4
     634:	8d 91       	ld	r24, X+
     636:	9c 91       	ld	r25, X
     638:	15 97       	sbiw	r26, 0x05	; 5
     63a:	8e 15       	cp	r24, r14
     63c:	9f 05       	cpc	r25, r15
     63e:	31 f0       	breq	.+12     	; 0x64c <QHsm_dispatch_+0x54>
     640:	60 e9       	ldi	r22, 0x90	; 144
     642:	71 e0       	ldi	r23, 0x01	; 1
     644:	82 e7       	ldi	r24, 0x72	; 114
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>
                      && (t == me->temp));

    /* process the event hierarchically... */
    do {
        s = me->temp;
     64c:	f8 01       	movw	r30, r16
     64e:	c4 80       	ldd	r12, Z+4	; 0x04
     650:	d5 80       	ldd	r13, Z+5	; 0x05
        r = (*s)(me); /* invoke state handler s */
     652:	c8 01       	movw	r24, r16
     654:	f6 01       	movw	r30, r12
     656:	09 95       	icall

        if (r == (QState)Q_RET_UNHANDLED) { /* unhandled due to a guard? */
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	61 f4       	brne	.+24     	; 0x674 <QHsm_dispatch_+0x7c>
            iq = (int_fast8_t)Q_SIG(me); /* save the original signal */
     65c:	d8 01       	movw	r26, r16
     65e:	16 96       	adiw	r26, 0x06	; 6
     660:	bc 90       	ld	r11, X
     662:	16 97       	sbiw	r26, 0x06	; 6
            Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_; /* find the superstate */
     664:	16 96       	adiw	r26, 0x06	; 6
     666:	1c 92       	st	X, r1
            r = (*s)(me); /* invoke state handler s */
     668:	c8 01       	movw	r24, r16
     66a:	f6 01       	movw	r30, r12
     66c:	09 95       	icall
            Q_SIG(me) = (QSignal)iq; /* restore the original signal */
     66e:	d8 01       	movw	r26, r16
     670:	16 96       	adiw	r26, 0x06	; 6
     672:	bc 92       	st	X, r11
        }
    } while (r == (QState)Q_RET_SUPER);
     674:	88 23       	and	r24, r24
     676:	51 f3       	breq	.-44     	; 0x64c <QHsm_dispatch_+0x54>

    /* transition taken? */
    if (r >= (QState)Q_RET_TRAN) {
     678:	88 30       	cpi	r24, 0x08	; 8
     67a:	08 f4       	brcc	.+2      	; 0x67e <QHsm_dispatch_+0x86>
     67c:	5c c1       	rjmp	.+696    	; 0x936 <__stack+0x37>
        QStateHandler path[QHSM_MAX_NEST_DEPTH_]; /* transition entry path */
        int_fast8_t ip; /* transition entry path index */

        path[0] = me->temp; /* save the target of the transition */
     67e:	f8 01       	movw	r30, r16
     680:	a4 80       	ldd	r10, Z+4	; 0x04
     682:	b5 80       	ldd	r11, Z+5	; 0x05
     684:	ba 82       	std	Y+2, r11	; 0x02
     686:	a9 82       	std	Y+1, r10	; 0x01
        path[1] = t;
     688:	fc 82       	std	Y+4, r15	; 0x04
     68a:	eb 82       	std	Y+3, r14	; 0x03
        path[2] = s;
     68c:	de 82       	std	Y+6, r13	; 0x06
     68e:	cd 82       	std	Y+5, r12	; 0x05

        /* exit current state to transition source s... */
        for (; t != s; t = me->temp) {
     690:	ec 14       	cp	r14, r12
     692:	fd 04       	cpc	r15, r13
     694:	c9 f0       	breq	.+50     	; 0x6c8 <QHsm_dispatch_+0xd0>
            Q_SIG(me) = (QSignal)Q_EXIT_SIG; /* find superstate of t */
     696:	68 94       	set
     698:	99 24       	eor	r9, r9
     69a:	91 f8       	bld	r9, 1
     69c:	d8 01       	movw	r26, r16
     69e:	16 96       	adiw	r26, 0x06	; 6
     6a0:	9c 92       	st	X, r9

            /* take the exit action and check if it was handled? */
            if ((*t)(me) == (QState)Q_RET_HANDLED) {
     6a2:	c8 01       	movw	r24, r16
     6a4:	f7 01       	movw	r30, r14
     6a6:	09 95       	icall
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	31 f4       	brne	.+12     	; 0x6b8 <QHsm_dispatch_+0xc0>
                Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
     6ac:	d8 01       	movw	r26, r16
     6ae:	16 96       	adiw	r26, 0x06	; 6
     6b0:	1c 92       	st	X, r1
                (void)(*t)(me); /* find superstate of t */
     6b2:	c8 01       	movw	r24, r16
     6b4:	f7 01       	movw	r30, r14
     6b6:	09 95       	icall
        path[0] = me->temp; /* save the target of the transition */
        path[1] = t;
        path[2] = s;

        /* exit current state to transition source s... */
        for (; t != s; t = me->temp) {
     6b8:	d8 01       	movw	r26, r16
     6ba:	14 96       	adiw	r26, 0x04	; 4
     6bc:	ed 90       	ld	r14, X+
     6be:	fc 90       	ld	r15, X
     6c0:	15 97       	sbiw	r26, 0x05	; 5
     6c2:	ce 14       	cp	r12, r14
     6c4:	df 04       	cpc	r13, r15
     6c6:	51 f7       	brne	.-44     	; 0x69c <QHsm_dispatch_+0xa4>
    QStateHandler t = path[0];
    QStateHandler s = path[2];
    QState r;

    /* (a) check source==target (transition to self) */
    if (s == t) {
     6c8:	ca 14       	cp	r12, r10
     6ca:	db 04       	cpc	r13, r11
     6cc:	39 f4       	brne	.+14     	; 0x6dc <QHsm_dispatch_+0xe4>
        Q_SIG(me) = (QSignal)Q_EXIT_SIG;
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	f8 01       	movw	r30, r16
     6d2:	86 83       	std	Z+6, r24	; 0x06
        (void)(*s)(me);      /* exit the source */
     6d4:	c8 01       	movw	r24, r16
     6d6:	f6 01       	movw	r30, r12
     6d8:	09 95       	icall
     6da:	37 c1       	rjmp	.+622    	; 0x94a <__stack+0x4b>
        ip = (int_fast8_t)0; /* enter the target */
    }
    else {
        Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
     6dc:	d8 01       	movw	r26, r16
     6de:	16 96       	adiw	r26, 0x06	; 6
     6e0:	1c 92       	st	X, r1
        (void)(*t)(me); /* find superstate of target */
     6e2:	c8 01       	movw	r24, r16
     6e4:	f5 01       	movw	r30, r10
     6e6:	09 95       	icall
        t = me->temp;
     6e8:	d8 01       	movw	r26, r16
     6ea:	14 96       	adiw	r26, 0x04	; 4
     6ec:	8d 90       	ld	r8, X+
     6ee:	9c 90       	ld	r9, X
     6f0:	15 97       	sbiw	r26, 0x05	; 5

        /* (b) check source==target->super */
        if (s == t) {
     6f2:	c8 14       	cp	r12, r8
     6f4:	d9 04       	cpc	r13, r9
     6f6:	09 f4       	brne	.+2      	; 0x6fa <QHsm_dispatch_+0x102>
     6f8:	28 c1       	rjmp	.+592    	; 0x94a <__stack+0x4b>
            ip = (int_fast8_t)0; /* enter the target */
        }
        else {
            Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
     6fa:	16 96       	adiw	r26, 0x06	; 6
     6fc:	1c 92       	st	X, r1
            (void)(*s)(me); /* find superstate of source */
     6fe:	c8 01       	movw	r24, r16
     700:	f6 01       	movw	r30, r12
     702:	09 95       	icall

            /* (c) check source->super==target->super */
            if (me->temp == t) {
     704:	d8 01       	movw	r26, r16
     706:	14 96       	adiw	r26, 0x04	; 4
     708:	ed 90       	ld	r14, X+
     70a:	fc 90       	ld	r15, X
     70c:	15 97       	sbiw	r26, 0x05	; 5
     70e:	8e 14       	cp	r8, r14
     710:	9f 04       	cpc	r9, r15
     712:	39 f4       	brne	.+14     	; 0x722 <QHsm_dispatch_+0x12a>
                Q_SIG(me) = (QSignal)Q_EXIT_SIG;
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	16 96       	adiw	r26, 0x06	; 6
     718:	8c 93       	st	X, r24
                (void)(*s)(me);     /* exit the source */
     71a:	c8 01       	movw	r24, r16
     71c:	f6 01       	movw	r30, r12
     71e:	09 95       	icall
     720:	14 c1       	rjmp	.+552    	; 0x94a <__stack+0x4b>
                ip = (int_fast8_t)0; /* enter the target */
            }
            else {
                /* (d) check source->super==target */
                if (me->temp == path[0]) {
     722:	ae 14       	cp	r10, r14
     724:	bf 04       	cpc	r11, r15
     726:	41 f4       	brne	.+16     	; 0x738 <QHsm_dispatch_+0x140>
                    Q_SIG(me) = (QSignal)Q_EXIT_SIG;
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	d8 01       	movw	r26, r16
     72c:	16 96       	adiw	r26, 0x06	; 6
     72e:	8c 93       	st	X, r24
                    (void)(*s)(me); /* exit the source */
     730:	c8 01       	movw	r24, r16
     732:	f6 01       	movw	r30, r12
     734:	09 95       	icall
     736:	96 c0       	rjmp	.+300    	; 0x864 <QHsm_dispatch_+0x26c>
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    iq = (int_fast8_t)0; /* indicate that LCA not found */
                    ip = (int_fast8_t)1; /* enter target and its superstate */
                    path[1] = t; /* save the superstate of target */
     738:	9c 82       	std	Y+4, r9	; 0x04
     73a:	8b 82       	std	Y+3, r8	; 0x03
                    t = me->temp; /* save source->super */

                    /* find target->super->super... */
                    Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
     73c:	d8 01       	movw	r26, r16
     73e:	16 96       	adiw	r26, 0x06	; 6
     740:	1c 92       	st	X, r1
                    r = (*path[1])(me);
     742:	c8 01       	movw	r24, r16
     744:	f4 01       	movw	r30, r8
     746:	09 95       	icall
                    while (r == (QState)Q_RET_SUPER) {
     748:	81 11       	cpse	r24, r1
     74a:	30 c0       	rjmp	.+96     	; 0x7ac <QHsm_dispatch_+0x1b4>
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    iq = (int_fast8_t)0; /* indicate that LCA not found */
                    ip = (int_fast8_t)1; /* enter target and its superstate */
     74c:	bb 24       	eor	r11, r11
     74e:	b3 94       	inc	r11

                    /* find target->super->super... */
                    Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
                    r = (*path[1])(me);
                    while (r == (QState)Q_RET_SUPER) {
                        ++ip;
     750:	aa 24       	eor	r10, r10
     752:	a3 94       	inc	r10
     754:	ab 0c       	add	r10, r11
                        path[ip] = me->temp; /* store the entry path */
     756:	d8 01       	movw	r26, r16
     758:	14 96       	adiw	r26, 0x04	; 4
     75a:	ed 91       	ld	r30, X+
     75c:	fc 91       	ld	r31, X
     75e:	15 97       	sbiw	r26, 0x05	; 5
     760:	aa 2d       	mov	r26, r10
     762:	aa 0f       	add	r26, r26
     764:	bb 0b       	sbc	r27, r27
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	8c 0f       	add	r24, r28
     76c:	9d 1f       	adc	r25, r29
     76e:	a8 0f       	add	r26, r24
     770:	b9 1f       	adc	r27, r25
     772:	ed 93       	st	X+, r30
     774:	fc 93       	st	X, r31
                        if (me->temp == s) { /* is it the source? */
     776:	ce 16       	cp	r12, r30
     778:	df 06       	cpc	r13, r31
     77a:	59 f4       	brne	.+22     	; 0x792 <QHsm_dispatch_+0x19a>
                            iq = (int_fast8_t)1; /* indicate that LCA found */

                            /* entry path must not overflow */
                            Q_ASSERT_ID(510, ip < QHSM_MAX_NEST_DEPTH_);
     77c:	94 e0       	ldi	r25, 0x04	; 4
     77e:	9a 15       	cp	r25, r10
     780:	0c f0       	brlt	.+2      	; 0x784 <QHsm_dispatch_+0x18c>
     782:	5a c0       	rjmp	.+180    	; 0x838 <QHsm_dispatch_+0x240>
     784:	6e ef       	ldi	r22, 0xFE	; 254
     786:	71 e0       	ldi	r23, 0x01	; 1
     788:	82 e7       	ldi	r24, 0x72	; 114
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>
     790:	53 c0       	rjmp	.+166    	; 0x838 <QHsm_dispatch_+0x240>
                            --ip; /* do not enter the source */
                            r = (QState)Q_RET_HANDLED; /* terminate loop */
                        }
                        /* it is not the source, keep going up */
                        else {
                            r = (*me->temp)(me); /* superstate of t */
     792:	c8 01       	movw	r24, r16
     794:	09 95       	icall
                    t = me->temp; /* save source->super */

                    /* find target->super->super... */
                    Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
                    r = (*path[1])(me);
                    while (r == (QState)Q_RET_SUPER) {
     796:	81 11       	cpse	r24, r1
     798:	e6 c0       	rjmp	.+460    	; 0x966 <__stack+0x67>
                        ++ip;
     79a:	ba 2c       	mov	r11, r10
     79c:	d9 cf       	rjmp	.-78     	; 0x750 <QHsm_dispatch_+0x158>

                    /* the LCA not found yet? */
                    if (iq == (int_fast8_t)0) {

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
     79e:	68 e0       	ldi	r22, 0x08	; 8
     7a0:	72 e0       	ldi	r23, 0x02	; 2
     7a2:	82 e7       	ldi	r24, 0x72	; 114
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <QHsm_dispatch_+0x1b8>
                else {
                    /* (e) check rest of source==target->super->super..
                    * and store the entry path along the way
                    */
                    iq = (int_fast8_t)0; /* indicate that LCA not found */
                    ip = (int_fast8_t)1; /* enter target and its superstate */
     7ac:	aa 24       	eor	r10, r10
     7ae:	a3 94       	inc	r10
                    if (iq == (int_fast8_t)0) {

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);

                        Q_SIG(me) = (QSignal)Q_EXIT_SIG;
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	d8 01       	movw	r26, r16
     7b4:	16 96       	adiw	r26, 0x06	; 6
     7b6:	8c 93       	st	X, r24
                        (void)(*s)(me); /* exit the source */
     7b8:	c8 01       	movw	r24, r16
     7ba:	f6 01       	movw	r30, r12
     7bc:	09 95       	icall
     7be:	ba 2c       	mov	r11, r10
                        *                  == target->super->super...
                        */
                        iq = ip;
                        r = (QState)Q_RET_IGNORED; /* LCA NOT found */
                        do {
                            if (t == path[iq]) { /* is this the LCA? */
     7c0:	eb 2d       	mov	r30, r11
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 0b       	sbc	r31, r31
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	8c 0f       	add	r24, r28
     7cc:	9d 1f       	adc	r25, r29
     7ce:	e8 0f       	add	r30, r24
     7d0:	f9 1f       	adc	r31, r25
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	e8 16       	cp	r14, r24
     7d8:	f9 06       	cpc	r15, r25
     7da:	11 f4       	brne	.+4      	; 0x7e0 <QHsm_dispatch_+0x1e8>
                                r = (QState)Q_RET_HANDLED; /* LCA found */

                                /* do not enter LCA */
                                ip = (int_fast8_t)(iq - (int_fast8_t)1);
     7dc:	ba 94       	dec	r11
     7de:	2c c0       	rjmp	.+88     	; 0x838 <QHsm_dispatch_+0x240>
                                iq = (int_fast8_t)(-1); /* terminate loop */
                            }
                            else {
                                --iq; /* try lower superstate of target */
     7e0:	ba 94       	dec	r11
                            }
                        } while (iq >= (int_fast8_t)0);
     7e2:	74 f7       	brge	.-36     	; 0x7c0 <QHsm_dispatch_+0x1c8>
                            * for each target->super...
                            */
                            r = (QState)Q_RET_IGNORED; /* keep looping */
                            do {
                                /* exit t unhandled? */
                                Q_SIG(me) = (QSignal)Q_EXIT_SIG;
     7e4:	68 94       	set
     7e6:	dd 24       	eor	r13, r13
     7e8:	d1 f8       	bld	r13, 1
     7ea:	d8 01       	movw	r26, r16
     7ec:	16 96       	adiw	r26, 0x06	; 6
     7ee:	dc 92       	st	X, r13
                                if ((*t)(me) == (QState)Q_RET_HANDLED) {
     7f0:	c8 01       	movw	r24, r16
     7f2:	f7 01       	movw	r30, r14
     7f4:	09 95       	icall
     7f6:	83 30       	cpi	r24, 0x03	; 3
     7f8:	31 f4       	brne	.+12     	; 0x806 <QHsm_dispatch_+0x20e>
                                    Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
     7fa:	d8 01       	movw	r26, r16
     7fc:	16 96       	adiw	r26, 0x06	; 6
     7fe:	1c 92       	st	X, r1
                                    (void)(*t)(me); /* find super of t */
     800:	c8 01       	movw	r24, r16
     802:	f7 01       	movw	r30, r14
     804:	09 95       	icall
                                }
                                t = me->temp; /* set to super of t */
     806:	d8 01       	movw	r26, r16
     808:	14 96       	adiw	r26, 0x04	; 4
     80a:	ed 90       	ld	r14, X+
     80c:	fc 90       	ld	r15, X
     80e:	15 97       	sbiw	r26, 0x05	; 5
     810:	ba 2c       	mov	r11, r10
                                iq = ip;
                                do {
                                    /* is this LCA? */
                                    if (t == path[iq]) {
     812:	ab 2d       	mov	r26, r11
     814:	aa 0f       	add	r26, r26
     816:	bb 0b       	sbc	r27, r27
     818:	e1 e0       	ldi	r30, 0x01	; 1
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	ec 0f       	add	r30, r28
     81e:	fd 1f       	adc	r31, r29
     820:	ae 0f       	add	r26, r30
     822:	bf 1f       	adc	r27, r31
     824:	2d 91       	ld	r18, X+
     826:	3c 91       	ld	r19, X
     828:	e2 16       	cp	r14, r18
     82a:	f3 06       	cpc	r15, r19
     82c:	11 f4       	brne	.+4      	; 0x832 <QHsm_dispatch_+0x23a>
                                        /* do not enter LCA */
                                        ip = (int_fast8_t)(iq-(int_fast8_t)1);
     82e:	ba 94       	dec	r11
     830:	03 c0       	rjmp	.+6      	; 0x838 <QHsm_dispatch_+0x240>
                                        /* cause breaking out of inner loop */
                                        iq = (int_fast8_t)(-1);
                                        r = (QState)Q_RET_HANDLED; /* break */
                                    }
                                    else {
                                        --iq;
     832:	ba 94       	dec	r11
                                    }
                                } while (iq >= (int_fast8_t)0);
     834:	74 f7       	brge	.-36     	; 0x812 <QHsm_dispatch_+0x21a>
     836:	d9 cf       	rjmp	.-78     	; 0x7ea <QHsm_dispatch_+0x1f2>
        }

        ip = QHsm_tran_(me, path); /* take the state transition */

        /* retrace the entry path in reverse (desired) order... */
        Q_SIG(me) = (QSignal)Q_ENTRY_SIG;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	d8 01       	movw	r26, r16
     83c:	16 96       	adiw	r26, 0x06	; 6
     83e:	8c 93       	st	X, r24
        for (; ip >= (int_fast8_t)0; --ip) {
     840:	bb 20       	and	r11, r11
     842:	84 f0       	brlt	.+32     	; 0x864 <QHsm_dispatch_+0x26c>
            (void)(*path[ip])(me); /* enter path[ip] */
     844:	eb 2d       	mov	r30, r11
     846:	ee 0f       	add	r30, r30
     848:	ff 0b       	sbc	r31, r31
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	8c 0f       	add	r24, r28
     850:	9d 1f       	adc	r25, r29
     852:	e8 0f       	add	r30, r24
     854:	f9 1f       	adc	r31, r25
     856:	01 90       	ld	r0, Z+
     858:	f0 81       	ld	r31, Z
     85a:	e0 2d       	mov	r30, r0
     85c:	c8 01       	movw	r24, r16
     85e:	09 95       	icall

        ip = QHsm_tran_(me, path); /* take the state transition */

        /* retrace the entry path in reverse (desired) order... */
        Q_SIG(me) = (QSignal)Q_ENTRY_SIG;
        for (; ip >= (int_fast8_t)0; --ip) {
     860:	ba 94       	dec	r11
     862:	84 f7       	brge	.-32     	; 0x844 <QHsm_dispatch_+0x24c>
            (void)(*path[ip])(me); /* enter path[ip] */
        }
        t = path[0];      /* stick the target into register */
     864:	e9 80       	ldd	r14, Y+1	; 0x01
     866:	fa 80       	ldd	r15, Y+2	; 0x02
        me->temp = t; /* update the current state */
     868:	d8 01       	movw	r26, r16
     86a:	15 96       	adiw	r26, 0x05	; 5
     86c:	fc 92       	st	X, r15
     86e:	ee 92       	st	-X, r14
     870:	14 97       	sbiw	r26, 0x04	; 4

        /* drill into the target hierarchy... */
        Q_SIG(me) = (QSignal)Q_INIT_SIG;
     872:	83 e0       	ldi	r24, 0x03	; 3
     874:	16 96       	adiw	r26, 0x06	; 6
     876:	8c 93       	st	X, r24
        while ((*t)(me) == (QState)Q_RET_TRAN) {
            ip = (int_fast8_t)0;
     878:	a1 2c       	mov	r10, r1

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);

            /* retrace the entry path in reverse (correct) order... */
            Q_SIG(me) = (QSignal)Q_ENTRY_SIG;
     87a:	bb 24       	eor	r11, r11
     87c:	b3 94       	inc	r11
                (void)(*path[ip])(me); /* enter path[ip] */
                --ip;
            } while (ip >= (int_fast8_t)0);

            t = path[0];
            Q_SIG(me) = (QSignal)Q_INIT_SIG;
     87e:	0f 2e       	mov	r0, r31
     880:	f3 e0       	ldi	r31, 0x03	; 3
     882:	cf 2e       	mov	r12, r31
     884:	f0 2d       	mov	r31, r0
        t = path[0];      /* stick the target into register */
        me->temp = t; /* update the current state */

        /* drill into the target hierarchy... */
        Q_SIG(me) = (QSignal)Q_INIT_SIG;
        while ((*t)(me) == (QState)Q_RET_TRAN) {
     886:	51 c0       	rjmp	.+162    	; 0x92a <__stack+0x2b>
            ip = (int_fast8_t)0;

            path[0] = me->temp;
     888:	d8 01       	movw	r26, r16
     88a:	14 96       	adiw	r26, 0x04	; 4
     88c:	ed 91       	ld	r30, X+
     88e:	fc 91       	ld	r31, X
     890:	15 97       	sbiw	r26, 0x05	; 5
     892:	fa 83       	std	Y+2, r31	; 0x02
     894:	e9 83       	std	Y+1, r30	; 0x01
            Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
     896:	16 96       	adiw	r26, 0x06	; 6
     898:	1c 92       	st	X, r1
            (void)(*me->temp)(me); /* find the superstate */
     89a:	c8 01       	movw	r24, r16
     89c:	09 95       	icall
            while (me->temp != t) {
     89e:	d8 01       	movw	r26, r16
     8a0:	14 96       	adiw	r26, 0x04	; 4
     8a2:	ed 91       	ld	r30, X+
     8a4:	fc 91       	ld	r31, X
     8a6:	15 97       	sbiw	r26, 0x05	; 5
     8a8:	ee 15       	cp	r30, r14
     8aa:	ff 05       	cpc	r31, r15
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <QHsm_dispatch_+0x2b8>
     8ae:	52 c0       	rjmp	.+164    	; 0x954 <__stack+0x55>
        me->temp = t; /* update the current state */

        /* drill into the target hierarchy... */
        Q_SIG(me) = (QSignal)Q_INIT_SIG;
        while ((*t)(me) == (QState)Q_RET_TRAN) {
            ip = (int_fast8_t)0;
     8b0:	da 2c       	mov	r13, r10

            path[0] = me->temp;
            Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
            (void)(*me->temp)(me); /* find the superstate */
            while (me->temp != t) {
                ++ip;
     8b2:	d3 94       	inc	r13
                path[ip] = me->temp;
     8b4:	ad 2d       	mov	r26, r13
     8b6:	aa 0f       	add	r26, r26
     8b8:	bb 0b       	sbc	r27, r27
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	8c 0f       	add	r24, r28
     8c0:	9d 1f       	adc	r25, r29
     8c2:	a8 0f       	add	r26, r24
     8c4:	b9 1f       	adc	r27, r25
     8c6:	ed 93       	st	X+, r30
     8c8:	fc 93       	st	X, r31
                (void)(*me->temp)(me); /* find the superstate */
     8ca:	c8 01       	movw	r24, r16
     8cc:	09 95       	icall
            ip = (int_fast8_t)0;

            path[0] = me->temp;
            Q_SIG(me) = (QSignal)QEP_EMPTY_SIG_;
            (void)(*me->temp)(me); /* find the superstate */
            while (me->temp != t) {
     8ce:	d8 01       	movw	r26, r16
     8d0:	14 96       	adiw	r26, 0x04	; 4
     8d2:	ed 91       	ld	r30, X+
     8d4:	fc 91       	ld	r31, X
     8d6:	15 97       	sbiw	r26, 0x05	; 5
     8d8:	ee 15       	cp	r30, r14
     8da:	ff 05       	cpc	r31, r15
     8dc:	51 f7       	brne	.-44     	; 0x8b2 <QHsm_dispatch_+0x2ba>
                ++ip;
                path[ip] = me->temp;
                (void)(*me->temp)(me); /* find the superstate */
            }
            me->temp = path[0];
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	9a 81       	ldd	r25, Y+2	; 0x02
     8e2:	15 96       	adiw	r26, 0x05	; 5
     8e4:	9c 93       	st	X, r25
     8e6:	8e 93       	st	-X, r24
     8e8:	14 97       	sbiw	r26, 0x04	; 4

            /* entry path must not overflow */
            Q_ASSERT_ID(410, ip < QHSM_MAX_NEST_DEPTH_);
     8ea:	b4 e0       	ldi	r27, 0x04	; 4
     8ec:	bd 15       	cp	r27, r13
     8ee:	34 f4       	brge	.+12     	; 0x8fc <QHsm_dispatch_+0x304>
     8f0:	6a e9       	ldi	r22, 0x9A	; 154
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	82 e7       	ldi	r24, 0x72	; 114
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>

            /* retrace the entry path in reverse (correct) order... */
            Q_SIG(me) = (QSignal)Q_ENTRY_SIG;
     8fc:	f8 01       	movw	r30, r16
     8fe:	b6 82       	std	Z+6, r11	; 0x06
            do {
                (void)(*path[ip])(me); /* enter path[ip] */
     900:	ed 2d       	mov	r30, r13
     902:	ee 0f       	add	r30, r30
     904:	ff 0b       	sbc	r31, r31
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	8c 0f       	add	r24, r28
     90c:	9d 1f       	adc	r25, r29
     90e:	e8 0f       	add	r30, r24
     910:	f9 1f       	adc	r31, r25
     912:	01 90       	ld	r0, Z+
     914:	f0 81       	ld	r31, Z
     916:	e0 2d       	mov	r30, r0
     918:	c8 01       	movw	r24, r16
     91a:	09 95       	icall
                --ip;
     91c:	da 94       	dec	r13
            } while (ip >= (int_fast8_t)0);
     91e:	84 f7       	brge	.-32     	; 0x900 <__stack+0x1>

            t = path[0];
     920:	e9 80       	ldd	r14, Y+1	; 0x01
     922:	fa 80       	ldd	r15, Y+2	; 0x02
            Q_SIG(me) = (QSignal)Q_INIT_SIG;
     924:	d8 01       	movw	r26, r16
     926:	16 96       	adiw	r26, 0x06	; 6
     928:	cc 92       	st	X, r12
        t = path[0];      /* stick the target into register */
        me->temp = t; /* update the current state */

        /* drill into the target hierarchy... */
        Q_SIG(me) = (QSignal)Q_INIT_SIG;
        while ((*t)(me) == (QState)Q_RET_TRAN) {
     92a:	c8 01       	movw	r24, r16
     92c:	f7 01       	movw	r30, r14
     92e:	09 95       	icall
     930:	88 30       	cpi	r24, 0x08	; 8
     932:	09 f4       	brne	.+2      	; 0x936 <__stack+0x37>
     934:	a9 cf       	rjmp	.-174    	; 0x888 <QHsm_dispatch_+0x290>
            t = path[0];
            Q_SIG(me) = (QSignal)Q_INIT_SIG;
        }
    }

    me->state = t; /* change the current active state */
     936:	d8 01       	movw	r26, r16
     938:	13 96       	adiw	r26, 0x03	; 3
     93a:	fc 92       	st	X, r15
     93c:	ee 92       	st	-X, r14
     93e:	12 97       	sbiw	r26, 0x02	; 2
    me->temp  = t; /* mark the configuration as stable */
     940:	15 96       	adiw	r26, 0x05	; 5
     942:	fc 92       	st	X, r15
     944:	ee 92       	st	-X, r14
     946:	14 97       	sbiw	r26, 0x04	; 4
     948:	13 c0       	rjmp	.+38     	; 0x970 <__stack+0x71>
        }

        ip = QHsm_tran_(me, path); /* take the state transition */

        /* retrace the entry path in reverse (desired) order... */
        Q_SIG(me) = (QSignal)Q_ENTRY_SIG;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	f8 01       	movw	r30, r16
     94e:	86 83       	std	Z+6, r24	; 0x06
     950:	b1 2c       	mov	r11, r1
     952:	78 cf       	rjmp	.-272    	; 0x844 <QHsm_dispatch_+0x24c>
            while (me->temp != t) {
                ++ip;
                path[ip] = me->temp;
                (void)(*me->temp)(me); /* find the superstate */
            }
            me->temp = path[0];
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	d8 01       	movw	r26, r16
     95a:	15 96       	adiw	r26, 0x05	; 5
     95c:	9c 93       	st	X, r25
     95e:	8e 93       	st	-X, r24
     960:	14 97       	sbiw	r26, 0x04	; 4
        me->temp = t; /* update the current state */

        /* drill into the target hierarchy... */
        Q_SIG(me) = (QSignal)Q_INIT_SIG;
        while ((*t)(me) == (QState)Q_RET_TRAN) {
            ip = (int_fast8_t)0;
     962:	da 2c       	mov	r13, r10
     964:	cb cf       	rjmp	.-106    	; 0x8fc <QHsm_dispatch_+0x304>

                    /* the LCA not found yet? */
                    if (iq == (int_fast8_t)0) {

                        /* entry path must not overflow */
                        Q_ASSERT_ID(520, ip < QHSM_MAX_NEST_DEPTH_);
     966:	b4 e0       	ldi	r27, 0x04	; 4
     968:	ba 15       	cp	r27, r10
     96a:	0c f0       	brlt	.+2      	; 0x96e <__stack+0x6f>
     96c:	21 cf       	rjmp	.-446    	; 0x7b0 <QHsm_dispatch_+0x1b8>
     96e:	17 cf       	rjmp	.-466    	; 0x79e <QHsm_dispatch_+0x1a6>
        }
    }

    me->state = t; /* change the current active state */
    me->temp  = t; /* mark the configuration as stable */
}
     970:	2a 96       	adiw	r28, 0x0a	; 10
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	08 95       	ret

00000996 <QHsm_ctor>:
* @usage
* The following example illustrates how to invoke QHsm_ctor() in the
* "constructor" of a derived state machine:
* @include qepn_qhsm_ctor.c
*/
void QHsm_ctor(QHsm * const me, QStateHandler initial) {
     996:	fc 01       	movw	r30, r24
    static QHsmVtbl const vtbl = { /* QHsm virtual table */
        &QHsm_init_,
        &QHsm_dispatch_
    };
    me->vptr  = &vtbl;
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	91 83       	std	Z+1, r25	; 0x01
     99e:	80 83       	st	Z, r24
    me->state = Q_STATE_CAST(&QHsm_top);
     9a0:	85 e4       	ldi	r24, 0x45	; 69
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	93 83       	std	Z+3, r25	; 0x03
     9a6:	82 83       	std	Z+2, r24	; 0x02
    me->temp  = initial;
     9a8:	75 83       	std	Z+5, r23	; 0x05
     9aa:	64 83       	std	Z+4, r22	; 0x04
     9ac:	08 95       	ret

000009ae <QActive_postX_>:
                    enum_t const sig, QParam const par)
#else
bool QActive_postX_(QActive * const me, uint_fast8_t margin,
                    enum_t const sig)
#endif
{
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	dc 01       	movw	r26, r24
    QActiveCB const Q_ROM *acb = &QF_active[me->prio];
     9b4:	1c 96       	adiw	r26, 0x0c	; 12
     9b6:	8c 91       	ld	r24, X
     9b8:	1c 97       	sbiw	r26, 0x0c	; 12
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	fc 01       	movw	r30, r24
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	8e 0f       	add	r24, r30
     9c8:	9f 1f       	adc	r25, r31
     9ca:	88 59       	subi	r24, 0x98	; 152
     9cc:	9f 4f       	sbci	r25, 0xFF	; 255
    uint_fast8_t qlen = (uint_fast8_t)Q_ROM_BYTE(acb->qlen);
     9ce:	fc 01       	movw	r30, r24
     9d0:	34 96       	adiw	r30, 0x04	; 4
     9d2:	34 91       	lpm	r19, Z

    QF_INT_DISABLE();
     9d4:	f8 94       	cli

    if (margin == QF_NO_MARGIN) {
     9d6:	6f 3f       	cpi	r22, 0xFF	; 255
     9d8:	69 f4       	brne	.+26     	; 0x9f4 <QActive_postX_+0x46>
        if (qlen > me->nUsed) {
     9da:	1f 96       	adiw	r26, 0x0f	; 15
     9dc:	5c 91       	ld	r21, X
     9de:	1f 97       	sbiw	r26, 0x0f	; 15
     9e0:	53 17       	cp	r21, r19
     9e2:	c8 f0       	brcs	.+50     	; 0xa16 <QActive_postX_+0x68>
            margin = (uint_fast8_t)true; /* can post */
        }
        else {
            margin = (uint_fast8_t)false; /* cannot post */
            Q_ERROR_ID(310); /* must be able to post the event */
     9e4:	66 e3       	ldi	r22, 0x36	; 54
     9e6:	71 e0       	ldi	r23, 0x01	; 1
     9e8:	87 e8       	ldi	r24, 0x87	; 135
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>
    if (margin == QF_NO_MARGIN) {
        if (qlen > me->nUsed) {
            margin = (uint_fast8_t)true; /* can post */
        }
        else {
            margin = (uint_fast8_t)false; /* cannot post */
     9f0:	c0 e0       	ldi	r28, 0x00	; 0
     9f2:	55 c0       	rjmp	.+170    	; 0xa9e <QActive_postX_+0xf0>
            Q_ERROR_ID(310); /* must be able to post the event */
        }
    }
    else if ((qlen - me->nUsed) > margin) {
     9f4:	c3 2f       	mov	r28, r19
     9f6:	d0 e0       	ldi	r29, 0x00	; 0
     9f8:	1f 96       	adiw	r26, 0x0f	; 15
     9fa:	5c 91       	ld	r21, X
     9fc:	1f 97       	sbiw	r26, 0x0f	; 15
     9fe:	c5 1b       	sub	r28, r21
     a00:	d1 09       	sbc	r29, r1
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	51 e0       	ldi	r21, 0x01	; 1
     a06:	6c 17       	cp	r22, r28
     a08:	7d 07       	cpc	r23, r29
     a0a:	0c f0       	brlt	.+2      	; 0xa0e <QActive_postX_+0x60>
     a0c:	50 e0       	ldi	r21, 0x00	; 0
    if (margin == QF_NO_MARGIN) {
        if (qlen > me->nUsed) {
            margin = (uint_fast8_t)true; /* can post */
        }
        else {
            margin = (uint_fast8_t)false; /* cannot post */
     a0e:	c5 2f       	mov	r28, r21
    }
    else {
        margin = (uint_fast8_t)false; /* cannot post */
    }

    if (margin) { /* can post the event? */
     a10:	51 11       	cpse	r21, r1
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <QActive_postX_+0x6a>
     a14:	44 c0       	rjmp	.+136    	; 0xa9e <QActive_postX_+0xf0>

    QF_INT_DISABLE();

    if (margin == QF_NO_MARGIN) {
        if (qlen > me->nUsed) {
            margin = (uint_fast8_t)true; /* can post */
     a16:	c1 e0       	ldi	r28, 0x01	; 1
        margin = (uint_fast8_t)false; /* cannot post */
    }

    if (margin) { /* can post the event? */
        /* insert event into the ring buffer (FIFO) */
        QF_ROM_QUEUE_AT_(acb, me->head).sig = (QSignal)sig;
     a18:	02 96       	adiw	r24, 0x02	; 2
     a1a:	fc 01       	movw	r30, r24
     a1c:	65 91       	lpm	r22, Z+
     a1e:	74 91       	lpm	r23, Z
     a20:	1d 96       	adiw	r26, 0x0d	; 13
     a22:	ec 91       	ld	r30, X
     a24:	1d 97       	sbiw	r26, 0x0d	; 13
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	e6 0f       	add	r30, r22
     a2e:	f7 1f       	adc	r31, r23
     a30:	40 83       	st	Z, r20
#if (Q_PARAM_SIZE != 0)
        QF_ROM_QUEUE_AT_(acb, me->head).par = par;
     a32:	fc 01       	movw	r30, r24
     a34:	85 91       	lpm	r24, Z+
     a36:	94 91       	lpm	r25, Z
     a38:	1d 96       	adiw	r26, 0x0d	; 13
     a3a:	4c 91       	ld	r20, X
     a3c:	1d 97       	sbiw	r26, 0x0d	; 13
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	44 0f       	add	r20, r20
     a42:	55 1f       	adc	r21, r21
     a44:	fa 01       	movw	r30, r20
     a46:	e8 0f       	add	r30, r24
     a48:	f9 1f       	adc	r31, r25
     a4a:	21 83       	std	Z+1, r18	; 0x01
#endif
        if (me->head == (uint_fast8_t)0) {
     a4c:	1d 96       	adiw	r26, 0x0d	; 13
     a4e:	8c 91       	ld	r24, X
     a50:	1d 97       	sbiw	r26, 0x0d	; 13
     a52:	81 11       	cpse	r24, r1
     a54:	03 c0       	rjmp	.+6      	; 0xa5c <QActive_postX_+0xae>
            me->head = qlen; /* wrap the head */
     a56:	1d 96       	adiw	r26, 0x0d	; 13
     a58:	3c 93       	st	X, r19
     a5a:	1d 97       	sbiw	r26, 0x0d	; 13
        }
        --me->head;
     a5c:	1d 96       	adiw	r26, 0x0d	; 13
     a5e:	8c 91       	ld	r24, X
     a60:	1d 97       	sbiw	r26, 0x0d	; 13
     a62:	81 50       	subi	r24, 0x01	; 1
     a64:	1d 96       	adiw	r26, 0x0d	; 13
     a66:	8c 93       	st	X, r24
     a68:	1d 97       	sbiw	r26, 0x0d	; 13
        ++me->nUsed;
     a6a:	1f 96       	adiw	r26, 0x0f	; 15
     a6c:	8c 91       	ld	r24, X
     a6e:	1f 97       	sbiw	r26, 0x0f	; 15
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	1f 96       	adiw	r26, 0x0f	; 15
     a74:	8c 93       	st	X, r24
     a76:	1f 97       	sbiw	r26, 0x0f	; 15

        /* is this the first event? */
        if (me->nUsed == (uint_fast8_t)1) {
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	89 f4       	brne	.+34     	; 0xa9e <QActive_postX_+0xf0>

            /* set the corresponding bit in the ready set */
            QF_readySet_ |= (uint_fast8_t)
     a7c:	40 91 4c 01 	lds	r20, 0x014C
                ((uint_fast8_t)1 << (me->prio - (uint_fast8_t)1));
     a80:	1c 96       	adiw	r26, 0x0c	; 12
     a82:	8c 91       	ld	r24, X
     a84:	81 50       	subi	r24, 0x01	; 1
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	b9 01       	movw	r22, r18
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <QActive_postX_+0xe4>
     a8e:	66 0f       	add	r22, r22
     a90:	77 1f       	adc	r23, r23
     a92:	8a 95       	dec	r24
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <QActive_postX_+0xe0>
     a96:	cb 01       	movw	r24, r22

        /* is this the first event? */
        if (me->nUsed == (uint_fast8_t)1) {

            /* set the corresponding bit in the ready set */
            QF_readySet_ |= (uint_fast8_t)
     a98:	84 2b       	or	r24, r20
     a9a:	80 93 4c 01 	sts	0x014C, r24
                QK_activate_(); /* activate the next active object */
            }
#endif
        }
    }
    QF_INT_ENABLE();
     a9e:	78 94       	sei

    return (bool)margin;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	c1 11       	cpse	r28, r1
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <QActive_postX_+0xfa>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
}
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <QActive_postXISR_>:
                       enum_t const sig, QParam const par)
#else
bool QActive_postXISR_(QActive * const me, uint_fast8_t margin,
                       enum_t const sig)
#endif
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	dc 01       	movw	r26, r24
#ifdef QF_ISR_NEST
#ifdef QF_ISR_STAT_TYPE
    QF_ISR_STAT_TYPE stat;
#endif
#endif
    QActiveCB const Q_ROM *acb = &QF_active[me->prio];
     ab4:	1c 96       	adiw	r26, 0x0c	; 12
     ab6:	8c 91       	ld	r24, X
     ab8:	1c 97       	sbiw	r26, 0x0c	; 12
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	fc 01       	movw	r30, r24
     abe:	ee 0f       	add	r30, r30
     ac0:	ff 1f       	adc	r31, r31
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	8e 0f       	add	r24, r30
     ac8:	9f 1f       	adc	r25, r31
     aca:	88 59       	subi	r24, 0x98	; 152
     acc:	9f 4f       	sbci	r25, 0xFF	; 255
    uint_fast8_t qlen = (uint_fast8_t)Q_ROM_BYTE(acb->qlen);
     ace:	fc 01       	movw	r30, r24
     ad0:	34 96       	adiw	r30, 0x04	; 4
     ad2:	34 91       	lpm	r19, Z
#else
    QF_INT_DISABLE();
#endif
#endif

    if (margin == QF_NO_MARGIN) {
     ad4:	6f 3f       	cpi	r22, 0xFF	; 255
     ad6:	69 f4       	brne	.+26     	; 0xaf2 <QActive_postXISR_+0x44>
        if (qlen > me->nUsed) {
     ad8:	1f 96       	adiw	r26, 0x0f	; 15
     ada:	5c 91       	ld	r21, X
     adc:	1f 97       	sbiw	r26, 0x0f	; 15
     ade:	53 17       	cp	r21, r19
     ae0:	c8 f0       	brcs	.+50     	; 0xb14 <QActive_postXISR_+0x66>
            margin = (uint_fast8_t)true; /* can post */
        }
        else {
            margin = (uint_fast8_t)false; /* cannot post */
            Q_ERROR_ID(310); /* must be able to post the event */
     ae2:	66 e3       	ldi	r22, 0x36	; 54
     ae4:	71 e0       	ldi	r23, 0x01	; 1
     ae6:	87 e8       	ldi	r24, 0x87	; 135
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>
    if (margin == QF_NO_MARGIN) {
        if (qlen > me->nUsed) {
            margin = (uint_fast8_t)true; /* can post */
        }
        else {
            margin = (uint_fast8_t)false; /* cannot post */
     aee:	c0 e0       	ldi	r28, 0x00	; 0
     af0:	55 c0       	rjmp	.+170    	; 0xb9c <QActive_postXISR_+0xee>
            Q_ERROR_ID(310); /* must be able to post the event */
        }
    }
    else if ((qlen - me->nUsed) > margin) {
     af2:	c3 2f       	mov	r28, r19
     af4:	d0 e0       	ldi	r29, 0x00	; 0
     af6:	1f 96       	adiw	r26, 0x0f	; 15
     af8:	5c 91       	ld	r21, X
     afa:	1f 97       	sbiw	r26, 0x0f	; 15
     afc:	c5 1b       	sub	r28, r21
     afe:	d1 09       	sbc	r29, r1
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	51 e0       	ldi	r21, 0x01	; 1
     b04:	6c 17       	cp	r22, r28
     b06:	7d 07       	cpc	r23, r29
     b08:	0c f0       	brlt	.+2      	; 0xb0c <QActive_postXISR_+0x5e>
     b0a:	50 e0       	ldi	r21, 0x00	; 0
    if (margin == QF_NO_MARGIN) {
        if (qlen > me->nUsed) {
            margin = (uint_fast8_t)true; /* can post */
        }
        else {
            margin = (uint_fast8_t)false; /* cannot post */
     b0c:	c5 2f       	mov	r28, r21
    }
    else {
        margin = (uint_fast8_t)false; /* cannot post */
    }

    if (margin) { /* can post the event? */
     b0e:	51 11       	cpse	r21, r1
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <QActive_postXISR_+0x68>
     b12:	44 c0       	rjmp	.+136    	; 0xb9c <QActive_postXISR_+0xee>
#endif
#endif

    if (margin == QF_NO_MARGIN) {
        if (qlen > me->nUsed) {
            margin = (uint_fast8_t)true; /* can post */
     b14:	c1 e0       	ldi	r28, 0x01	; 1
        margin = (uint_fast8_t)false; /* cannot post */
    }

    if (margin) { /* can post the event? */
        /* insert event into the ring buffer (FIFO) */
        QF_ROM_QUEUE_AT_(acb, me->head).sig = (QSignal)sig;
     b16:	02 96       	adiw	r24, 0x02	; 2
     b18:	fc 01       	movw	r30, r24
     b1a:	65 91       	lpm	r22, Z+
     b1c:	74 91       	lpm	r23, Z
     b1e:	1d 96       	adiw	r26, 0x0d	; 13
     b20:	ec 91       	ld	r30, X
     b22:	1d 97       	sbiw	r26, 0x0d	; 13
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	e6 0f       	add	r30, r22
     b2c:	f7 1f       	adc	r31, r23
     b2e:	40 83       	st	Z, r20
#if (Q_PARAM_SIZE != 0)
        QF_ROM_QUEUE_AT_(acb, me->head).par = par;
     b30:	fc 01       	movw	r30, r24
     b32:	85 91       	lpm	r24, Z+
     b34:	94 91       	lpm	r25, Z
     b36:	1d 96       	adiw	r26, 0x0d	; 13
     b38:	4c 91       	ld	r20, X
     b3a:	1d 97       	sbiw	r26, 0x0d	; 13
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	44 0f       	add	r20, r20
     b40:	55 1f       	adc	r21, r21
     b42:	fa 01       	movw	r30, r20
     b44:	e8 0f       	add	r30, r24
     b46:	f9 1f       	adc	r31, r25
     b48:	21 83       	std	Z+1, r18	; 0x01
#endif
        if (me->head == (uint_fast8_t)0) {
     b4a:	1d 96       	adiw	r26, 0x0d	; 13
     b4c:	8c 91       	ld	r24, X
     b4e:	1d 97       	sbiw	r26, 0x0d	; 13
     b50:	81 11       	cpse	r24, r1
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <QActive_postXISR_+0xac>
            me->head = qlen; /* wrap the head */
     b54:	1d 96       	adiw	r26, 0x0d	; 13
     b56:	3c 93       	st	X, r19
     b58:	1d 97       	sbiw	r26, 0x0d	; 13
        }
        --me->head;
     b5a:	1d 96       	adiw	r26, 0x0d	; 13
     b5c:	8c 91       	ld	r24, X
     b5e:	1d 97       	sbiw	r26, 0x0d	; 13
     b60:	81 50       	subi	r24, 0x01	; 1
     b62:	1d 96       	adiw	r26, 0x0d	; 13
     b64:	8c 93       	st	X, r24
     b66:	1d 97       	sbiw	r26, 0x0d	; 13
        ++me->nUsed;
     b68:	1f 96       	adiw	r26, 0x0f	; 15
     b6a:	8c 91       	ld	r24, X
     b6c:	1f 97       	sbiw	r26, 0x0f	; 15
     b6e:	8f 5f       	subi	r24, 0xFF	; 255
     b70:	1f 96       	adiw	r26, 0x0f	; 15
     b72:	8c 93       	st	X, r24
     b74:	1f 97       	sbiw	r26, 0x0f	; 15
        /* is this the first event? */
        if (me->nUsed == (uint_fast8_t)1) {
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	89 f4       	brne	.+34     	; 0xb9c <QActive_postXISR_+0xee>
            /* set the bit */
            QF_readySet_ |= (uint_fast8_t)
     b7a:	40 91 4c 01 	lds	r20, 0x014C
                ((uint_fast8_t)1 << (me->prio - (uint_fast8_t)1));
     b7e:	1c 96       	adiw	r26, 0x0c	; 12
     b80:	8c 91       	ld	r24, X
     b82:	81 50       	subi	r24, 0x01	; 1
     b84:	21 e0       	ldi	r18, 0x01	; 1
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	b9 01       	movw	r22, r18
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <QActive_postXISR_+0xe2>
     b8c:	66 0f       	add	r22, r22
     b8e:	77 1f       	adc	r23, r23
     b90:	8a 95       	dec	r24
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <QActive_postXISR_+0xde>
     b94:	cb 01       	movw	r24, r22
        --me->head;
        ++me->nUsed;
        /* is this the first event? */
        if (me->nUsed == (uint_fast8_t)1) {
            /* set the bit */
            QF_readySet_ |= (uint_fast8_t)
     b96:	84 2b       	or	r24, r20
     b98:	80 93 4c 01 	sts	0x014C, r24
#else
    QF_INT_ENABLE();
#endif
#endif

    return (bool)margin;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	c1 11       	cpse	r28, r1
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <QActive_postXISR_+0xf6>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <QActive_ctor>:
    (uint8_t)4, (uint8_t)4, (uint8_t)4, (uint8_t)4
};
#endif /* QF_LOG2 */

/****************************************************************************/
void QActive_ctor(QActive * const me, QStateHandler initial) {
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	ec 01       	movw	r28, r24
    * in the code for QHsm_init_() and QHsm_dispatch_() implemetations,
    * which is expensive. To avoid this code size penalty, in case ::QHsm is
    * not used in a given project, the call to QHsm_ctor() avoids pulling
    * in the code for QHsm.
    */
    QHsm_ctor(&me->super, initial);
     bb0:	0e 94 cb 04 	call	0x996	; 0x996 <QHsm_ctor>
    me->super.vptr = &vtbl.super; /* hook the vptr to QActive virtual table */
     bb4:	87 e0       	ldi	r24, 0x07	; 7
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	99 83       	std	Y+1, r25	; 0x01
     bba:	88 83       	st	Y, r24
}
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <QF_init>:
*
* @note
* The intended use of the function is to call as follows:
* QF_init(Q_DIM(QF_active));
*/
void QF_init(uint_fast8_t maxActive) {
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	c8 2f       	mov	r28, r24
    QActive *a;
    uint_fast8_t p;
    uint_fast8_t n;

    /** @pre the number of active objects must be in range */
    Q_REQUIRE_ID(100, ((uint_fast8_t)1 < maxActive)
     bca:	8e ef       	ldi	r24, 0xFE	; 254
     bcc:	8c 0f       	add	r24, r28
     bce:	88 30       	cpi	r24, 0x08	; 8
     bd0:	30 f0       	brcs	.+12     	; 0xbde <QF_init+0x1c>
     bd2:	64 e6       	ldi	r22, 0x64	; 100
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	87 e8       	ldi	r24, 0x87	; 135
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>
                      && (maxActive <= (uint_fast8_t)9));
    QF_maxActive_ = (uint_fast8_t)maxActive - (uint_fast8_t)1;
     bde:	c1 50       	subi	r28, 0x01	; 1
     be0:	c0 93 4b 01 	sts	0x014B, r28
    for (n = (uint_fast8_t)0; n < (uint_fast8_t)QF_MAX_TICK_RATE; ++n) {
        QF_timerSetX_[n] = (uint_fast8_t)0;
    }
#endif /* QF_TIMEEVT_USAGE */

    QF_readySet_ = (uint_fast8_t)0;
     be4:	10 92 4c 01 	sts	0x014C, r1
#endif

#endif /* #ifdef QK_PREEMPTIVE */

    /* clear all registered active objects... */
    for (p = (uint_fast8_t)1; p <= QF_maxActive_; ++p) {
     be8:	cc 23       	and	r28, r28
     bea:	11 f1       	breq	.+68     	; 0xc30 <QF_init+0x6e>
     bec:	11 e0       	ldi	r17, 0x01	; 1
        a = QF_ROM_ACTIVE_GET_(p);
     bee:	81 2f       	mov	r24, r17
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	fc 01       	movw	r30, r24
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	e8 0f       	add	r30, r24
     bfe:	f9 1f       	adc	r31, r25
     c00:	e8 59       	subi	r30, 0x98	; 152
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	c5 91       	lpm	r28, Z+
     c06:	d4 91       	lpm	r29, Z

        /* QF_active[p] must be initialized */
        Q_ASSERT_ID(110, a != (QActive *)0);
     c08:	20 97       	sbiw	r28, 0x00	; 0
     c0a:	31 f4       	brne	.+12     	; 0xc18 <QF_init+0x56>
     c0c:	6e e6       	ldi	r22, 0x6E	; 110
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	87 e8       	ldi	r24, 0x87	; 135
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>

        a->head    = (uint_fast8_t)0;
     c18:	1d 86       	std	Y+13, r1	; 0x0d
        a->tail    = (uint_fast8_t)0;
     c1a:	1e 86       	std	Y+14, r1	; 0x0e
        a->nUsed   = (uint_fast8_t)0;
     c1c:	1f 86       	std	Y+15, r1	; 0x0f
#if (QF_TIMEEVT_CTR_SIZE != 0)
        for (n = (uint_fast8_t)0; n < (uint_fast8_t)QF_MAX_TICK_RATE; ++n) {
            a->tickCtr[n].nTicks   = (QTimeEvtCtr)0;
     c1e:	19 86       	std	Y+9, r1	; 0x09
     c20:	18 86       	std	Y+8, r1	; 0x08
#ifdef QF_TIMEEVT_PERIODIC
            a->tickCtr[n].interval = (QTimeEvtCtr)0;
     c22:	1b 86       	std	Y+11, r1	; 0x0b
     c24:	1a 86       	std	Y+10, r1	; 0x0a
#endif

#endif /* #ifdef QK_PREEMPTIVE */

    /* clear all registered active objects... */
    for (p = (uint_fast8_t)1; p <= QF_maxActive_; ++p) {
     c26:	1f 5f       	subi	r17, 0xFF	; 255
     c28:	80 91 4b 01 	lds	r24, 0x014B
     c2c:	81 17       	cp	r24, r17
     c2e:	f8 f6       	brcc	.-66     	; 0xbee <QF_init+0x2c>
#ifdef QV_INIT /* initialization of the QV-nano kernel defined? */
    QV_INIT(); /* port-specific initialization of the QV-nano kernel */
#elif defined QK_INIT /* initialization of the QK-nano kernel defined? */
    QK_INIT(); /* port-specific initialization of the QK-nano kernel */
#endif
}
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	08 95       	ret

00000c38 <QF_tickXISR>:
*
* @note The calls to QF_tickXISR() with different tick rate parameter can
* preempt each other. For example, higher clock tick rates might be serviced
* from interrupts that can preempt lower-priority interrupts.
*/
void QF_tickXISR(uint_fast8_t const tickRate) {
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
    uint_fast8_t p = QF_maxActive_;
     c42:	f0 90 4b 01 	lds	r15, 0x014B
    do {
        QActive *a = QF_ROM_ACTIVE_GET_(p);
        QTimer *t = &a->tickCtr[tickRate];
     c46:	08 2f       	mov	r16, r24
     c48:	10 e0       	ldi	r17, 0x00	; 0
     c4a:	e8 01       	movw	r28, r16
     c4c:	22 96       	adiw	r28, 0x02	; 2
     c4e:	cc 0f       	add	r28, r28
     c50:	dd 1f       	adc	r29, r29
     c52:	cc 0f       	add	r28, r28
     c54:	dd 1f       	adc	r29, r29
                QF_timerSetX_[tickRate] &= (uint_fast8_t)
                    ~((uint_fast8_t)1 << (p - (uint_fast8_t)1));
#endif /* QF_TIMEEVT_USAGE */

#if (Q_PARAM_SIZE != 0)
                QACTIVE_POST_ISR(a, (enum_t)Q_TIMEOUT_SIG + (enum_t)tickRate,
     c56:	0c 5f       	subi	r16, 0xFC	; 252
     c58:	1f 4f       	sbci	r17, 0xFF	; 255
* from interrupts that can preempt lower-priority interrupts.
*/
void QF_tickXISR(uint_fast8_t const tickRate) {
    uint_fast8_t p = QF_maxActive_;
    do {
        QActive *a = QF_ROM_ACTIVE_GET_(p);
     c5a:	2f 2d       	mov	r18, r15
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	f9 01       	movw	r30, r18
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	ee 0f       	add	r30, r30
     c66:	ff 1f       	adc	r31, r31
     c68:	e2 0f       	add	r30, r18
     c6a:	f3 1f       	adc	r31, r19
     c6c:	e8 59       	subi	r30, 0x98	; 152
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	85 91       	lpm	r24, Z+
     c72:	94 91       	lpm	r25, Z
        QTimer *t = &a->tickCtr[tickRate];
     c74:	fc 01       	movw	r30, r24
     c76:	ec 0f       	add	r30, r28
     c78:	fd 1f       	adc	r31, r29

        if (t->nTicks != (QTimeEvtCtr)0) {
     c7a:	20 81       	ld	r18, Z
     c7c:	31 81       	ldd	r19, Z+1	; 0x01
     c7e:	21 15       	cp	r18, r1
     c80:	31 05       	cpc	r19, r1
     c82:	b9 f0       	breq	.+46     	; 0xcb2 <QF_tickXISR+0x7a>
            --t->nTicks;
     c84:	21 50       	subi	r18, 0x01	; 1
     c86:	31 09       	sbc	r19, r1
     c88:	31 83       	std	Z+1, r19	; 0x01
     c8a:	20 83       	st	Z, r18
            if (t->nTicks == (QTimeEvtCtr)0) {
     c8c:	23 2b       	or	r18, r19
     c8e:	89 f4       	brne	.+34     	; 0xcb2 <QF_tickXISR+0x7a>

#ifdef QF_TIMEEVT_PERIODIC
                if (t->interval != (QTimeEvtCtr)0) {
     c90:	22 81       	ldd	r18, Z+2	; 0x02
     c92:	33 81       	ldd	r19, Z+3	; 0x03
     c94:	21 15       	cp	r18, r1
     c96:	31 05       	cpc	r19, r1
     c98:	11 f0       	breq	.+4      	; 0xc9e <QF_tickXISR+0x66>
                    t->nTicks = t->interval; /* re-arm the periodic timer */
     c9a:	31 83       	std	Z+1, r19	; 0x01
     c9c:	20 83       	st	Z, r18
                QF_timerSetX_[tickRate] &= (uint_fast8_t)
                    ~((uint_fast8_t)1 << (p - (uint_fast8_t)1));
#endif /* QF_TIMEEVT_USAGE */

#if (Q_PARAM_SIZE != 0)
                QACTIVE_POST_ISR(a, (enum_t)Q_TIMEOUT_SIG + (enum_t)tickRate,
     c9e:	dc 01       	movw	r26, r24
     ca0:	ed 91       	ld	r30, X+
     ca2:	fc 91       	ld	r31, X
     ca4:	06 80       	ldd	r0, Z+6	; 0x06
     ca6:	f7 81       	ldd	r31, Z+7	; 0x07
     ca8:	e0 2d       	mov	r30, r0
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	a8 01       	movw	r20, r16
     cae:	6f ef       	ldi	r22, 0xFF	; 255
     cb0:	09 95       	icall
#else
                QACTIVE_POST_ISR(a, (enum_t)Q_TIMEOUT_SIG + (enum_t)tickRate);
#endif /* (Q_PARAM_SIZE != 0) */
            }
        }
        --p;
     cb2:	fa 94       	dec	r15
    } while (p != (uint_fast8_t)0);
     cb4:	91 f6       	brne	.-92     	; 0xc5a <QF_tickXISR+0x22>
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	08 95       	ret

00000cc2 <QActive_armX>:
#else
void QActive_armX(QActive * const me, uint_fast8_t const tickRate,
                  QTimeEvtCtr const nTicks)
#endif
{
    QF_INT_DISABLE();
     cc2:	f8 94       	cli
    me->tickCtr[tickRate].nTicks = nTicks;
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	fb 01       	movw	r30, r22
     cc8:	32 96       	adiw	r30, 0x02	; 2
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	e8 0f       	add	r30, r24
     cd4:	f9 1f       	adc	r31, r25
     cd6:	51 83       	std	Z+1, r21	; 0x01
     cd8:	40 83       	st	Z, r20
#ifdef QF_TIMEEVT_PERIODIC
    me->tickCtr[tickRate].interval = interval;
     cda:	66 0f       	add	r22, r22
     cdc:	77 1f       	adc	r23, r23
     cde:	66 0f       	add	r22, r22
     ce0:	77 1f       	adc	r23, r23
     ce2:	fc 01       	movw	r30, r24
     ce4:	e6 0f       	add	r30, r22
     ce6:	f7 1f       	adc	r31, r23
     ce8:	33 87       	std	Z+11, r19	; 0x0b
     cea:	22 87       	std	Z+10, r18	; 0x0a
#ifdef QF_TIMEEVT_USAGE
    /* set a bit in QF_timerSetX_[] to rememer that the timer is running */
    QF_timerSetX_[tickRate] |= (uint_fast8_t)
        ((uint_fast8_t)1 << (me->prio - (uint_fast8_t)1));
#endif
    QF_INT_ENABLE();
     cec:	78 94       	sei
     cee:	08 95       	ret

00000cf0 <QF_run>:
    QF_maxActive_ = (uint_fast8_t)QF_MAX_ACTIVE;
#else
    /** @pre the number of active objects must be initialized by calling:
    * QF_init(Q_DIM(QF_active));
    */
    Q_REQUIRE_ID(100, ((uint_fast8_t)1 <= QF_maxActive_)
     cf0:	80 91 4b 01 	lds	r24, 0x014B
     cf4:	81 50       	subi	r24, 0x01	; 1
     cf6:	88 30       	cpi	r24, 0x08	; 8
     cf8:	30 f0       	brcs	.+12     	; 0xd06 <QF_run+0x16>
     cfa:	64 e6       	ldi	r22, 0x64	; 100
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	8b e8       	ldi	r24, 0x8B	; 139
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>
                      && (QF_maxActive_ <= (uint_fast8_t)8));
#endif

    /* set priorities all registered active objects... */
    for (p = (uint_fast8_t)1; p <= QF_maxActive_; ++p) {
     d06:	80 91 4b 01 	lds	r24, 0x014B
     d0a:	88 23       	and	r24, r24
     d0c:	09 f4       	brne	.+2      	; 0xd10 <QF_run+0x20>
     d0e:	3a c0       	rjmp	.+116    	; 0xd84 <QF_run+0x94>
     d10:	11 e0       	ldi	r17, 0x01	; 1
        a = QF_ROM_ACTIVE_GET_(p);
     d12:	81 2f       	mov	r24, r17
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	9c 01       	movw	r18, r24
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	82 0f       	add	r24, r18
     d22:	93 1f       	adc	r25, r19
     d24:	fc 01       	movw	r30, r24
     d26:	e8 59       	subi	r30, 0x98	; 152
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	c5 91       	lpm	r28, Z+
     d2c:	d4 91       	lpm	r29, Z

        /* QF_active[p] must be initialized */
        Q_ASSERT_ID(810, a != (QActive *)0);
     d2e:	20 97       	sbiw	r28, 0x00	; 0
     d30:	31 f4       	brne	.+12     	; 0xd3e <QF_run+0x4e>
     d32:	6a e2       	ldi	r22, 0x2A	; 42
     d34:	73 e0       	ldi	r23, 0x03	; 3
     d36:	8b e8       	ldi	r24, 0x8B	; 139
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>

        a->prio = p; /* set the priority of the active object */
     d3e:	1c 87       	std	Y+12, r17	; 0x0c
    Q_REQUIRE_ID(100, ((uint_fast8_t)1 <= QF_maxActive_)
                      && (QF_maxActive_ <= (uint_fast8_t)8));
#endif

    /* set priorities all registered active objects... */
    for (p = (uint_fast8_t)1; p <= QF_maxActive_; ++p) {
     d40:	1f 5f       	subi	r17, 0xFF	; 255
     d42:	80 91 4b 01 	lds	r24, 0x014B
     d46:	81 17       	cp	r24, r17
     d48:	20 f7       	brcc	.-56     	; 0xd12 <QF_run+0x22>

        a->prio = p; /* set the priority of the active object */
    }

    /* trigger initial transitions in all registered active objects... */
    for (p = (uint_fast8_t)1; p <= QF_maxActive_; ++p) {
     d4a:	88 23       	and	r24, r24
     d4c:	d9 f0       	breq	.+54     	; 0xd84 <QF_run+0x94>
     d4e:	c1 e0       	ldi	r28, 0x01	; 1
        a = QF_ROM_ACTIVE_GET_(p);
     d50:	8c 2f       	mov	r24, r28
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9c 01       	movw	r18, r24
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	22 0f       	add	r18, r18
     d5c:	33 1f       	adc	r19, r19
     d5e:	82 0f       	add	r24, r18
     d60:	93 1f       	adc	r25, r19
     d62:	fc 01       	movw	r30, r24
     d64:	e8 59       	subi	r30, 0x98	; 152
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	85 91       	lpm	r24, Z+
     d6a:	94 91       	lpm	r25, Z
        QHSM_INIT(&a->super); /* take the initial transition in the SM */
     d6c:	dc 01       	movw	r26, r24
     d6e:	ed 91       	ld	r30, X+
     d70:	fc 91       	ld	r31, X
     d72:	01 90       	ld	r0, Z+
     d74:	f0 81       	ld	r31, Z
     d76:	e0 2d       	mov	r30, r0
     d78:	09 95       	icall

        a->prio = p; /* set the priority of the active object */
    }

    /* trigger initial transitions in all registered active objects... */
    for (p = (uint_fast8_t)1; p <= QF_maxActive_; ++p) {
     d7a:	cf 5f       	subi	r28, 0xFF	; 255
     d7c:	80 91 4b 01 	lds	r24, 0x014B
     d80:	8c 17       	cp	r24, r28
     d82:	30 f7       	brcc	.-52     	; 0xd50 <QF_run+0x60>
        a = QF_ROM_ACTIVE_GET_(p);
        QHSM_INIT(&a->super); /* take the initial transition in the SM */
    }

    QF_onStartup(); /* invoke startup callback */
     d84:	0e 94 22 02 	call	0x444	; 0x444 <QF_onStartup>

    /* the event loop of the cooperative QV-nano kernel... */
    QF_INT_DISABLE();
     d88:	f8 94       	cli
            QF_INT_DISABLE();
            /* empty queue? */
            if (a->nUsed == (uint_fast8_t)0) {
                /* clear the bit corresponding to 'p' */
                QF_readySet_ &=
                    (uint_fast8_t)~((uint_fast8_t)1 << (p - (uint_fast8_t)1));
     d8a:	cc 24       	eor	r12, r12
     d8c:	c3 94       	inc	r12
     d8e:	d1 2c       	mov	r13, r1
    QF_onStartup(); /* invoke startup callback */

    /* the event loop of the cooperative QV-nano kernel... */
    QF_INT_DISABLE();
    for (;;) {
        if (QF_readySet_ != (uint_fast8_t)0) {
     d90:	80 91 4c 01 	lds	r24, 0x014C
     d94:	88 23       	and	r24, r24
     d96:	09 f4       	brne	.+2      	; 0xd9a <QF_run+0xaa>
     d98:	6e c0       	rjmp	.+220    	; 0xe76 <QF_run+0x186>

#ifdef QF_LOG2
            p = QF_LOG2(QF_readySet_);
#else
            /* hi nibble non-zero? */
            if ((QF_readySet_ & (uint_fast8_t)0xF0) != (uint_fast8_t)0) {
     d9a:	80 91 4c 01 	lds	r24, 0x014C
     d9e:	80 7f       	andi	r24, 0xF0	; 240
     da0:	51 f0       	breq	.+20     	; 0xdb6 <QF_run+0xc6>
                p = (uint_fast8_t)(
                      (uint_fast8_t)Q_ROM_BYTE(QF_log2Lkup[QF_readySet_ >> 4])
     da2:	e0 91 4c 01 	lds	r30, 0x014C
     da6:	e2 95       	swap	r30
     da8:	ef 70       	andi	r30, 0x0F	; 15
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	e9 58       	subi	r30, 0x89	; 137
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	e4 91       	lpm	r30, Z
#ifdef QF_LOG2
            p = QF_LOG2(QF_readySet_);
#else
            /* hi nibble non-zero? */
            if ((QF_readySet_ & (uint_fast8_t)0xF0) != (uint_fast8_t)0) {
                p = (uint_fast8_t)(
     db2:	ec 5f       	subi	r30, 0xFC	; 252
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <QF_run+0xd2>
                      (uint_fast8_t)Q_ROM_BYTE(QF_log2Lkup[QF_readySet_ >> 4])
                      + (uint_fast8_t)4);
            }
            else { /* hi nibble of QF_readySet_ is zero */
                p = (uint_fast8_t)Q_ROM_BYTE(QF_log2Lkup[QF_readySet_]);
     db6:	e0 91 4c 01 	lds	r30, 0x014C
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	e9 58       	subi	r30, 0x89	; 137
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	e4 91       	lpm	r30, Z
            }
#endif /* QF_LOG2 */

            acb = &QF_active[p];
     dc2:	0e 2f       	mov	r16, r30
     dc4:	10 e0       	ldi	r17, 0x00	; 0
     dc6:	78 01       	movw	r14, r16
     dc8:	ee 0c       	add	r14, r14
     dca:	ff 1c       	adc	r15, r15
     dcc:	ee 0c       	add	r14, r14
     dce:	ff 1c       	adc	r15, r15
     dd0:	c7 01       	movw	r24, r14
     dd2:	80 0f       	add	r24, r16
     dd4:	91 1f       	adc	r25, r17
     dd6:	9c 01       	movw	r18, r24
     dd8:	28 59       	subi	r18, 0x98	; 152
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	79 01       	movw	r14, r18
            a = QF_ROM_ACTIVE_GET_(p);
     dde:	f9 01       	movw	r30, r18
     de0:	c5 91       	lpm	r28, Z+
     de2:	d4 91       	lpm	r29, Z

            /* some unsuded events must be available */
            Q_ASSERT_ID(820, a->nUsed > (uint_fast8_t)0);
     de4:	8f 85       	ldd	r24, Y+15	; 0x0f
     de6:	81 11       	cpse	r24, r1
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <QF_run+0x106>
     dea:	64 e3       	ldi	r22, 0x34	; 52
     dec:	73 e0       	ldi	r23, 0x03	; 3
     dee:	8b e8       	ldi	r24, 0x8B	; 139
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 41 02 	call	0x482	; 0x482 <Q_onAssert>

            --a->nUsed;
     df6:	8f 85       	ldd	r24, Y+15	; 0x0f
     df8:	81 50       	subi	r24, 0x01	; 1
     dfa:	8f 87       	std	Y+15, r24	; 0x0f
            Q_SIG(a) = QF_ROM_QUEUE_AT_(acb, a->tail).sig;
     dfc:	6e 85       	ldd	r22, Y+14	; 0x0e
     dfe:	86 2f       	mov	r24, r22
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	97 01       	movw	r18, r14
     e08:	2e 5f       	subi	r18, 0xFE	; 254
     e0a:	3f 4f       	sbci	r19, 0xFF	; 255
     e0c:	f9 01       	movw	r30, r18
     e0e:	45 91       	lpm	r20, Z+
     e10:	54 91       	lpm	r21, Z
     e12:	fa 01       	movw	r30, r20
     e14:	e8 0f       	add	r30, r24
     e16:	f9 1f       	adc	r31, r25
     e18:	40 81       	ld	r20, Z
     e1a:	4e 83       	std	Y+6, r20	; 0x06
#if (Q_PARAM_SIZE != 0)
            Q_PAR(a) = QF_ROM_QUEUE_AT_(acb, a->tail).par;
     e1c:	f9 01       	movw	r30, r18
     e1e:	25 91       	lpm	r18, Z+
     e20:	34 91       	lpm	r19, Z
     e22:	f9 01       	movw	r30, r18
     e24:	e8 0f       	add	r30, r24
     e26:	f9 1f       	adc	r31, r25
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	8f 83       	std	Y+7, r24	; 0x07
#endif
            if (a->tail == (uint_fast8_t)0) { /* wrap around? */
     e2c:	61 11       	cpse	r22, r1
     e2e:	04 c0       	rjmp	.+8      	; 0xe38 <QF_run+0x148>
                a->tail = (uint_fast8_t)Q_ROM_BYTE(acb->qlen);
     e30:	f7 01       	movw	r30, r14
     e32:	34 96       	adiw	r30, 0x04	; 4
     e34:	e4 90       	lpm	r14, Z
     e36:	ee 86       	std	Y+14, r14	; 0x0e
            }
            --a->tail;
     e38:	8e 85       	ldd	r24, Y+14	; 0x0e
     e3a:	81 50       	subi	r24, 0x01	; 1
     e3c:	8e 87       	std	Y+14, r24	; 0x0e
            QF_INT_ENABLE();
     e3e:	78 94       	sei

            QHSM_DISPATCH(&a->super); /* dispatch to the HSM (RTC step) */
     e40:	e8 81       	ld	r30, Y
     e42:	f9 81       	ldd	r31, Y+1	; 0x01
     e44:	02 80       	ldd	r0, Z+2	; 0x02
     e46:	f3 81       	ldd	r31, Z+3	; 0x03
     e48:	e0 2d       	mov	r30, r0
     e4a:	ce 01       	movw	r24, r28
     e4c:	09 95       	icall

            QF_INT_DISABLE();
     e4e:	f8 94       	cli
            /* empty queue? */
            if (a->nUsed == (uint_fast8_t)0) {
     e50:	8f 85       	ldd	r24, Y+15	; 0x0f
     e52:	81 11       	cpse	r24, r1
     e54:	9d cf       	rjmp	.-198    	; 0xd90 <QF_run+0xa0>
                /* clear the bit corresponding to 'p' */
                QF_readySet_ &=
     e56:	80 91 4c 01 	lds	r24, 0x014C
                    (uint_fast8_t)~((uint_fast8_t)1 << (p - (uint_fast8_t)1));
     e5a:	01 50       	subi	r16, 0x01	; 1
     e5c:	11 09       	sbc	r17, r1
     e5e:	d6 01       	movw	r26, r12
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <QF_run+0x176>
     e62:	aa 0f       	add	r26, r26
     e64:	bb 1f       	adc	r27, r27
     e66:	0a 95       	dec	r16
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <QF_run+0x172>
     e6a:	8d 01       	movw	r16, r26
     e6c:	00 95       	com	r16

            QF_INT_DISABLE();
            /* empty queue? */
            if (a->nUsed == (uint_fast8_t)0) {
                /* clear the bit corresponding to 'p' */
                QF_readySet_ &=
     e6e:	08 23       	and	r16, r24
     e70:	00 93 4c 01 	sts	0x014C, r16
     e74:	8d cf       	rjmp	.-230    	; 0xd90 <QF_run+0xa0>
            * queues) can change at any time by an interrupt posting events
            * to a queue. QV_onIdle() MUST enable interrupts internally,
            * perhaps at the same time as putting the CPU into a power-saving
            * mode.
            */
            QV_onIdle();
     e76:	0e 94 3b 02 	call	0x476	; 0x476 <QV_onIdle>

            QF_INT_DISABLE();
     e7a:	f8 94       	cli
     e7c:	89 cf       	rjmp	.-238    	; 0xd90 <QF_run+0xa0>

00000e7e <Sumo_edge>:
    return status_;
}
/*${AOs::Sumo::SM::edge} ...................................................*/
QState Sumo_edge(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
     e7e:	fc 01       	movw	r30, r24
     e80:	26 81       	ldd	r18, Z+6	; 0x06
     e82:	23 30       	cpi	r18, 0x03	; 3
     e84:	19 f0       	breq	.+6      	; 0xe8c <Sumo_edge+0xe>
     e86:	2a 30       	cpi	r18, 0x0A	; 10
     e88:	41 f0       	breq	.+16     	; 0xe9a <Sumo_edge+0x1c>
     e8a:	0e c0       	rjmp	.+28     	; 0xea8 <Sumo_edge+0x2a>
        /* ${AOs::Sumo::SM::edge::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Sumo_back);
     e8c:	2c e9       	ldi	r18, 0x9C	; 156
     e8e:	39 e0       	ldi	r19, 0x09	; 9
     e90:	fc 01       	movw	r30, r24
     e92:	35 83       	std	Z+5, r19	; 0x05
     e94:	24 83       	std	Z+4, r18	; 0x04
     e96:	88 e0       	ldi	r24, 0x08	; 8
            break;
     e98:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::edge::INSIDE} */
        case INSIDE_SIG: {
            status_ = Q_TRAN(&Sumo_turn);
     e9a:	2d e2       	ldi	r18, 0x2D	; 45
     e9c:	39 e0       	ldi	r19, 0x09	; 9
     e9e:	fc 01       	movw	r30, r24
     ea0:	35 83       	std	Z+5, r19	; 0x05
     ea2:	24 83       	std	Z+4, r18	; 0x04
     ea4:	88 e0       	ldi	r24, 0x08	; 8
            break;
     ea6:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
     ea8:	25 e4       	ldi	r18, 0x45	; 69
     eaa:	32 e0       	ldi	r19, 0x02	; 2
     eac:	fc 01       	movw	r30, r24
     eae:	35 83       	std	Z+5, r19	; 0x05
     eb0:	24 83       	std	Z+4, r18	; 0x04
     eb2:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
     eb4:	08 95       	ret

00000eb6 <Sumo_wait>:
QState Sumo_initial(Sumo * const me) {
    /* ${AOs::Sumo::SM::initial} */
    return Q_TRAN(&Sumo_wait);
}
/*${AOs::Sumo::SM::wait} ...................................................*/
QState Sumo_wait(Sumo * const me) {
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	ec 01       	movw	r28, r24
    QState status_;
    switch (Q_SIG(me)) {
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	71 f0       	breq	.+28     	; 0xede <Sumo_wait+0x28>
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	81 f0       	breq	.+32     	; 0xee6 <Sumo_wait+0x30>
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	e1 f4       	brne	.+56     	; 0xf02 <Sumo_wait+0x4c>
        /* ${AOs::Sumo::SM::wait} */
        case Q_ENTRY_SIG: {
            QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);
     eca:	24 e6       	ldi	r18, 0x64	; 100
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	44 e6       	ldi	r20, 0x64	; 100
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	ce 01       	movw	r24, r28
     ed6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <QActive_armX>
            status_ = Q_HANDLED();
     eda:	83 e0       	ldi	r24, 0x03	; 3
            break;
     edc:	17 c0       	rjmp	.+46     	; 0xf0c <Sumo_wait+0x56>
        }
        /* ${AOs::Sumo::SM::wait::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            BSP_ToggleLed();
     ede:	0e 94 a8 00 	call	0x150	; 0x150 <BSP_ToggleLed>
            status_ = Q_HANDLED();
     ee2:	83 e0       	ldi	r24, 0x03	; 3
            break;
     ee4:	13 c0       	rjmp	.+38     	; 0xf0c <Sumo_wait+0x56>
        }
        /* ${AOs::Sumo::SM::wait::BUTTON} */
        case BUTTON_SIG: {
            QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC*5 - 1, BSP_TICKS_PER_SEC*5 - 1);
     ee6:	27 ee       	ldi	r18, 0xE7	; 231
     ee8:	33 e0       	ldi	r19, 0x03	; 3
     eea:	47 ee       	ldi	r20, 0xE7	; 231
     eec:	53 e0       	ldi	r21, 0x03	; 3
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	ce 01       	movw	r24, r28
     ef2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <QActive_armX>
            status_ = Q_TRAN(&Sumo_hold);
     ef6:	89 e8       	ldi	r24, 0x89	; 137
     ef8:	97 e0       	ldi	r25, 0x07	; 7
     efa:	9d 83       	std	Y+5, r25	; 0x05
     efc:	8c 83       	std	Y+4, r24	; 0x04
     efe:	88 e0       	ldi	r24, 0x08	; 8
            break;
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <Sumo_wait+0x56>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
     f02:	85 e4       	ldi	r24, 0x45	; 69
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	9d 83       	std	Y+5, r25	; 0x05
     f08:	8c 83       	std	Y+4, r24	; 0x04
     f0a:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <Sumo_hold>:
/*${AOs::Sumo::SM::hold} ...................................................*/
QState Sumo_hold(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
     f12:	fc 01       	movw	r30, r24
     f14:	26 81       	ldd	r18, Z+6	; 0x06
     f16:	22 30       	cpi	r18, 0x02	; 2
     f18:	41 f0       	breq	.+16     	; 0xf2a <Sumo_hold+0x18>
     f1a:	24 30       	cpi	r18, 0x04	; 4
     f1c:	51 f0       	breq	.+20     	; 0xf32 <Sumo_hold+0x20>
     f1e:	21 30       	cpi	r18, 0x01	; 1
     f20:	79 f4       	brne	.+30     	; 0xf40 <Sumo_hold+0x2e>
        /* ${AOs::Sumo::SM::hold} */
        case Q_ENTRY_SIG: {
            BSP_LedOn();
     f22:	0e 94 aa 00 	call	0x154	; 0x154 <BSP_LedOn>
            status_ = Q_HANDLED();
     f26:	83 e0       	ldi	r24, 0x03	; 3
            break;
     f28:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::hold} */
        case Q_EXIT_SIG: {
            BSP_LedOff();
     f2a:	0e 94 ac 00 	call	0x158	; 0x158 <BSP_LedOff>
            status_ = Q_HANDLED();
     f2e:	83 e0       	ldi	r24, 0x03	; 3
            break;
     f30:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::hold::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&Sumo_combat);
     f32:	27 ea       	ldi	r18, 0xA7	; 167
     f34:	37 e0       	ldi	r19, 0x07	; 7
     f36:	fc 01       	movw	r30, r24
     f38:	35 83       	std	Z+5, r19	; 0x05
     f3a:	24 83       	std	Z+4, r18	; 0x04
     f3c:	88 e0       	ldi	r24, 0x08	; 8
            break;
     f3e:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
     f40:	25 e4       	ldi	r18, 0x45	; 69
     f42:	32 e0       	ldi	r19, 0x02	; 2
     f44:	fc 01       	movw	r30, r24
     f46:	35 83       	std	Z+5, r19	; 0x05
     f48:	24 83       	std	Z+4, r18	; 0x04
     f4a:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
     f4c:	08 95       	ret

00000f4e <Sumo_combat>:
/*${AOs::Sumo::SM::combat} .................................................*/
QState Sumo_combat(Sumo * const me) {
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	ec 01       	movw	r28, r24
    QState status_;
    switch (Q_SIG(me)) {
     f54:	8e 81       	ldd	r24, Y+6	; 0x06
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	99 f0       	breq	.+38     	; 0xf80 <Sumo_combat+0x32>
     f5a:	18 f4       	brcc	.+6      	; 0xf62 <Sumo_combat+0x14>
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	31 f0       	breq	.+12     	; 0xf6c <Sumo_combat+0x1e>
     f60:	35 c0       	rjmp	.+106    	; 0xfcc <Sumo_combat+0x7e>
     f62:	84 30       	cpi	r24, 0x04	; 4
     f64:	f9 f0       	breq	.+62     	; 0xfa4 <Sumo_combat+0x56>
     f66:	89 30       	cpi	r24, 0x09	; 9
     f68:	89 f0       	breq	.+34     	; 0xf8c <Sumo_combat+0x3e>
     f6a:	30 c0       	rjmp	.+96     	; 0xfcc <Sumo_combat+0x7e>
        /* ${AOs::Sumo::SM::combat} */
        case Q_ENTRY_SIG: {
            QActive_armX((QActive *)me, 0, BSP_TICKS_PER_SEC*2/50, BSP_TICKS_PER_SEC*2/50);
     f6c:	28 e0       	ldi	r18, 0x08	; 8
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	48 e0       	ldi	r20, 0x08	; 8
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 61 06 	call	0xcc2	; 0xcc2 <QActive_armX>
            status_ = Q_HANDLED();
     f7c:	83 e0       	ldi	r24, 0x03	; 3
            break;
     f7e:	2f c0       	rjmp	.+94     	; 0xfde <Sumo_combat+0x90>
        }
        /* ${AOs::Sumo::SM::combat::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Sumo_start);
     f80:	8c e2       	ldi	r24, 0x2C	; 44
     f82:	98 e0       	ldi	r25, 0x08	; 8
     f84:	9d 83       	std	Y+5, r25	; 0x05
     f86:	8c 83       	std	Y+4, r24	; 0x04
     f88:	88 e0       	ldi	r24, 0x08	; 8
            break;
     f8a:	29 c0       	rjmp	.+82     	; 0xfde <Sumo_combat+0x90>
        }
        /* ${AOs::Sumo::SM::combat::EDGE} */
        case EDGE_SIG: {
            /* ${AOs::Sumo::SM::combat::EDGE::[may_go_back]} */
            if (!(me->attacking) || (me->attacking && (me->last_edge == 0))) {
     f8c:	8a 89       	ldd	r24, Y+18	; 0x12
     f8e:	88 23       	and	r24, r24
     f90:	19 f0       	breq	.+6      	; 0xf98 <Sumo_combat+0x4a>
     f92:	89 89       	ldd	r24, Y+17	; 0x11
     f94:	81 11       	cpse	r24, r1
     f96:	20 c0       	rjmp	.+64     	; 0xfd8 <Sumo_combat+0x8a>
                status_ = Q_TRAN(&Sumo_edge);
     f98:	8f e3       	ldi	r24, 0x3F	; 63
     f9a:	97 e0       	ldi	r25, 0x07	; 7
     f9c:	9d 83       	std	Y+5, r25	; 0x05
     f9e:	8c 83       	std	Y+4, r24	; 0x04
     fa0:	88 e0       	ldi	r24, 0x08	; 8
     fa2:	1d c0       	rjmp	.+58     	; 0xfde <Sumo_combat+0x90>
            }
            break;
        }
        /* ${AOs::Sumo::SM::combat::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            BSP_ToggleLed();
     fa4:	0e 94 a8 00 	call	0x150	; 0x150 <BSP_ToggleLed>
            if (BSP_ReadOpSensors(me)) {
     fa8:	ce 01       	movw	r24, r28
     faa:	0e 94 00 01 	call	0x200	; 0x200 <BSP_ReadOpSensors>
     fae:	88 23       	and	r24, r24
     fb0:	a9 f0       	breq	.+42     	; 0xfdc <Sumo_combat+0x8e>
                QACTIVE_POST(&(me->super), LOST_SIG, 0);
     fb2:	e8 81       	ld	r30, Y
     fb4:	f9 81       	ldd	r31, Y+1	; 0x01
     fb6:	04 80       	ldd	r0, Z+4	; 0x04
     fb8:	f5 81       	ldd	r31, Z+5	; 0x05
     fba:	e0 2d       	mov	r30, r0
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	4f e0       	ldi	r20, 0x0F	; 15
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	6f ef       	ldi	r22, 0xFF	; 255
     fc4:	ce 01       	movw	r24, r28
     fc6:	09 95       	icall
            }
            status_ = Q_HANDLED();
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	09 c0       	rjmp	.+18     	; 0xfde <Sumo_combat+0x90>
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
     fcc:	85 e4       	ldi	r24, 0x45	; 69
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	9d 83       	std	Y+5, r25	; 0x05
     fd2:	8c 83       	std	Y+4, r24	; 0x04
     fd4:	80 e0       	ldi	r24, 0x00	; 0
            break;
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <Sumo_combat+0x90>
            if (!(me->attacking) || (me->attacking && (me->last_edge == 0))) {
                status_ = Q_TRAN(&Sumo_edge);
            }
            /* ${AOs::Sumo::SM::combat::EDGE::[else]} */
            else {
                status_ = Q_HANDLED();
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	01 c0       	rjmp	.+2      	; 0xfde <Sumo_combat+0x90>
        case Q_TIMEOUT_SIG: {
            BSP_ToggleLed();
            if (BSP_ReadOpSensors(me)) {
                QACTIVE_POST(&(me->super), LOST_SIG, 0);
            }
            status_ = Q_HANDLED();
     fdc:	83 e0       	ldi	r24, 0x03	; 3
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <Sumo_normal>:
/*${AOs::Sumo::SM::combat::normal} .........................................*/
QState Sumo_normal(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
     fe4:	fc 01       	movw	r30, r24
     fe6:	26 81       	ldd	r18, Z+6	; 0x06
     fe8:	22 30       	cpi	r18, 0x02	; 2
     fea:	19 f0       	breq	.+6      	; 0xff2 <Sumo_normal+0xe>
     fec:	23 30       	cpi	r18, 0x03	; 3
     fee:	29 f0       	breq	.+10     	; 0xffa <Sumo_normal+0x16>
     ff0:	0b c0       	rjmp	.+22     	; 0x1008 <Sumo_normal+0x24>
        /* ${AOs::Sumo::SM::combat::normal} */
        case Q_EXIT_SIG: {
            BSP_Stop();
     ff2:	0e 94 ae 00 	call	0x15c	; 0x15c <BSP_Stop>
            status_ = Q_HANDLED();
     ff6:	83 e0       	ldi	r24, 0x03	; 3
            break;
     ff8:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::combat::normal::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Sumo_search);
     ffa:	21 e7       	ldi	r18, 0x71	; 113
     ffc:	38 e0       	ldi	r19, 0x08	; 8
     ffe:	fc 01       	movw	r30, r24
    1000:	35 83       	std	Z+5, r19	; 0x05
    1002:	24 83       	std	Z+4, r18	; 0x04
    1004:	88 e0       	ldi	r24, 0x08	; 8
            break;
    1006:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_combat);
    1008:	27 ea       	ldi	r18, 0xA7	; 167
    100a:	37 e0       	ldi	r19, 0x07	; 7
    100c:	fc 01       	movw	r30, r24
    100e:	35 83       	std	Z+5, r19	; 0x05
    1010:	24 83       	std	Z+4, r18	; 0x04
    1012:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    1014:	08 95       	ret

00001016 <Sumo_evade>:
    return status_;
}
/*${AOs::Sumo::SM::combat::normal::evade} ..................................*/
QState Sumo_evade(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    1016:	fc 01       	movw	r30, r24
    1018:	26 81       	ldd	r18, Z+6	; 0x06
    101a:	2c 30       	cpi	r18, 0x0C	; 12
    101c:	79 f0       	breq	.+30     	; 0x103c <Sumo_evade+0x26>
    101e:	2f 30       	cpi	r18, 0x0F	; 15
    1020:	31 f0       	breq	.+12     	; 0x102e <Sumo_evade+0x18>
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	91 f4       	brne	.+36     	; 0x104a <Sumo_evade+0x34>
        /* ${AOs::Sumo::SM::combat::normal::evade} */
        case Q_EXIT_SIG: {
            BSP_Stop();
    1026:	0e 94 ae 00 	call	0x15c	; 0x15c <BSP_Stop>
            status_ = Q_HANDLED();
    102a:	83 e0       	ldi	r24, 0x03	; 3
            break;
    102c:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::combat::normal::evade::LOST} */
        case LOST_SIG: {
            status_ = Q_TRAN(&Sumo_evaded);
    102e:	24 ed       	ldi	r18, 0xD4	; 212
    1030:	38 e0       	ldi	r19, 0x08	; 8
    1032:	fc 01       	movw	r30, r24
    1034:	35 83       	std	Z+5, r19	; 0x05
    1036:	24 83       	std	Z+4, r18	; 0x04
    1038:	88 e0       	ldi	r24, 0x08	; 8
            break;
    103a:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::combat::normal::evade::FRONT} */
        case FRONT_SIG: {
            status_ = Q_TRAN(&Sumo_search);
    103c:	21 e7       	ldi	r18, 0x71	; 113
    103e:	38 e0       	ldi	r19, 0x08	; 8
    1040:	fc 01       	movw	r30, r24
    1042:	35 83       	std	Z+5, r19	; 0x05
    1044:	24 83       	std	Z+4, r18	; 0x04
    1046:	88 e0       	ldi	r24, 0x08	; 8
            break;
    1048:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_normal);
    104a:	22 ef       	ldi	r18, 0xF2	; 242
    104c:	37 e0       	ldi	r19, 0x07	; 7
    104e:	fc 01       	movw	r30, r24
    1050:	35 83       	std	Z+5, r19	; 0x05
    1052:	24 83       	std	Z+4, r18	; 0x04
    1054:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    1056:	08 95       	ret

00001058 <Sumo_start>:
    return status_;
}
/*${AOs::Sumo::SM::combat::start} ..........................................*/
QState Sumo_start(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    1058:	fc 01       	movw	r30, r24
    105a:	26 81       	ldd	r18, Z+6	; 0x06
    105c:	23 30       	cpi	r18, 0x03	; 3
    105e:	69 f0       	breq	.+26     	; 0x107a <Sumo_start+0x22>
    1060:	18 f4       	brcc	.+6      	; 0x1068 <Sumo_start+0x10>
    1062:	22 30       	cpi	r18, 0x02	; 2
    1064:	31 f0       	breq	.+12     	; 0x1072 <Sumo_start+0x1a>
    1066:	17 c0       	rjmp	.+46     	; 0x1096 <Sumo_start+0x3e>
    1068:	2c 30       	cpi	r18, 0x0C	; 12
    106a:	71 f0       	breq	.+28     	; 0x1088 <Sumo_start+0x30>
    106c:	20 31       	cpi	r18, 0x10	; 16
    106e:	61 f0       	breq	.+24     	; 0x1088 <Sumo_start+0x30>
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <Sumo_start+0x3e>
        /* ${AOs::Sumo::SM::combat::start} */
        case Q_EXIT_SIG: {
            BSP_Stop();
    1072:	0e 94 ae 00 	call	0x15c	; 0x15c <BSP_Stop>
            status_ = Q_HANDLED();
    1076:	83 e0       	ldi	r24, 0x03	; 3
            break;
    1078:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::combat::start::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Sumo_read);
    107a:	2c e5       	ldi	r18, 0x5C	; 92
    107c:	39 e0       	ldi	r19, 0x09	; 9
    107e:	fc 01       	movw	r30, r24
    1080:	35 83       	std	Z+5, r19	; 0x05
    1082:	24 83       	std	Z+4, r18	; 0x04
    1084:	88 e0       	ldi	r24, 0x08	; 8
            break;
    1086:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::combat::start::FRONT, TIMER1OVF} */
        case FRONT_SIG: /* intentionally fall through */
        case TIMER1OVF_SIG: {
            status_ = Q_TRAN(&Sumo_normal);
    1088:	22 ef       	ldi	r18, 0xF2	; 242
    108a:	37 e0       	ldi	r19, 0x07	; 7
    108c:	fc 01       	movw	r30, r24
    108e:	35 83       	std	Z+5, r19	; 0x05
    1090:	24 83       	std	Z+4, r18	; 0x04
    1092:	88 e0       	ldi	r24, 0x08	; 8
            break;
    1094:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_combat);
    1096:	27 ea       	ldi	r18, 0xA7	; 167
    1098:	37 e0       	ldi	r19, 0x07	; 7
    109a:	fc 01       	movw	r30, r24
    109c:	35 83       	std	Z+5, r19	; 0x05
    109e:	24 83       	std	Z+4, r18	; 0x04
    10a0:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    10a2:	08 95       	ret

000010a4 <Sumo_attack>:
    return status_;
}
/*${AOs::Sumo::SM::combat::normal::attack} .................................*/
QState Sumo_attack(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    10a4:	fc 01       	movw	r30, r24
    10a6:	26 81       	ldd	r18, Z+6	; 0x06
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	49 f0       	breq	.+18     	; 0x10be <Sumo_attack+0x1a>
    10ac:	2f 30       	cpi	r18, 0x0F	; 15
    10ae:	59 f0       	breq	.+22     	; 0x10c6 <Sumo_attack+0x22>
    10b0:	21 30       	cpi	r18, 0x01	; 1
    10b2:	81 f4       	brne	.+32     	; 0x10d4 <Sumo_attack+0x30>
        /* ${AOs::Sumo::SM::combat::normal::attack} */
        case Q_ENTRY_SIG: {
            me->attacking = 1;
    10b4:	22 8b       	std	Z+18, r18	; 0x12
            BSP_GoForward();
    10b6:	0e 94 b5 00 	call	0x16a	; 0x16a <BSP_GoForward>
            status_ = Q_HANDLED();
    10ba:	83 e0       	ldi	r24, 0x03	; 3
            break;
    10bc:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::combat::normal::attack} */
        case Q_EXIT_SIG: {
            me->attacking = 0;
    10be:	fc 01       	movw	r30, r24
    10c0:	12 8a       	std	Z+18, r1	; 0x12
            status_ = Q_HANDLED();
    10c2:	83 e0       	ldi	r24, 0x03	; 3
            break;
    10c4:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::combat::normal::attack::LOST} */
        case LOST_SIG: {
            status_ = Q_TRAN(&Sumo_search);
    10c6:	21 e7       	ldi	r18, 0x71	; 113
    10c8:	38 e0       	ldi	r19, 0x08	; 8
    10ca:	fc 01       	movw	r30, r24
    10cc:	35 83       	std	Z+5, r19	; 0x05
    10ce:	24 83       	std	Z+4, r18	; 0x04
    10d0:	88 e0       	ldi	r24, 0x08	; 8
            break;
    10d2:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_normal);
    10d4:	22 ef       	ldi	r18, 0xF2	; 242
    10d6:	37 e0       	ldi	r19, 0x07	; 7
    10d8:	fc 01       	movw	r30, r24
    10da:	35 83       	std	Z+5, r19	; 0x05
    10dc:	24 83       	std	Z+4, r18	; 0x04
    10de:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    10e0:	08 95       	ret

000010e2 <Sumo_search>:
        }
    }
    return status_;
}
/*${AOs::Sumo::SM::combat::normal::search} .................................*/
QState Sumo_search(Sumo * const me) {
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	ec 01       	movw	r28, r24
    QState status_;
    switch (Q_SIG(me)) {
    10e8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ea:	8b 30       	cpi	r24, 0x0B	; 11
    10ec:	69 f0       	breq	.+26     	; 0x1108 <Sumo_search+0x26>
    10ee:	18 f4       	brcc	.+6      	; 0x10f6 <Sumo_search+0x14>
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	31 f0       	breq	.+12     	; 0x1100 <Sumo_search+0x1e>
    10f4:	33 c0       	rjmp	.+102    	; 0x115c <Sumo_search+0x7a>
    10f6:	8c 30       	cpi	r24, 0x0C	; 12
    10f8:	59 f1       	breq	.+86     	; 0x1150 <Sumo_search+0x6e>
    10fa:	8d 30       	cpi	r24, 0x0D	; 13
    10fc:	b9 f0       	breq	.+46     	; 0x112c <Sumo_search+0x4a>
    10fe:	2e c0       	rjmp	.+92     	; 0x115c <Sumo_search+0x7a>
        /* ${AOs::Sumo::SM::combat::normal::search} */
        case Q_ENTRY_SIG: {
            BSP_GoForward();
    1100:	0e 94 b5 00 	call	0x16a	; 0x16a <BSP_GoForward>
            status_ = Q_HANDLED();
    1104:	83 e0       	ldi	r24, 0x03	; 3
            break;
    1106:	2f c0       	rjmp	.+94     	; 0x1166 <Sumo_search+0x84>
        }
        /* ${AOs::Sumo::SM::combat::normal::search::LEFT} */
        case LEFT_SIG: {
            BSP_TurnSpeed(Q_PAR(me), LEFT);
    1108:	6f ef       	ldi	r22, 0xFF	; 255
    110a:	8f 81       	ldd	r24, Y+7	; 0x07
    110c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <BSP_TurnSpeed>
            /* ${AOs::Sumo::SM::combat::normal::search::LEFT::[too_close]} */
            if (Q_PAR(me) > 51) {
    1110:	8f 81       	ldd	r24, Y+7	; 0x07
    1112:	84 33       	cpi	r24, 0x34	; 52
    1114:	30 f0       	brcs	.+12     	; 0x1122 <Sumo_search+0x40>
                status_ = Q_TRAN(&Sumo_evade_left);
    1116:	85 ec       	ldi	r24, 0xC5	; 197
    1118:	98 e0       	ldi	r25, 0x08	; 8
    111a:	9d 83       	std	Y+5, r25	; 0x05
    111c:	8c 83       	std	Y+4, r24	; 0x04
    111e:	88 e0       	ldi	r24, 0x08	; 8
    1120:	22 c0       	rjmp	.+68     	; 0x1166 <Sumo_search+0x84>
            }
            /* ${AOs::Sumo::SM::combat::normal::search::LEFT::[else]} */
            else {
                BSP_TurnSpeed(Q_PAR(me), LEFT);
    1122:	6f ef       	ldi	r22, 0xFF	; 255
    1124:	0e 94 d7 00 	call	0x1ae	; 0x1ae <BSP_TurnSpeed>
                status_ = Q_HANDLED();
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	1d c0       	rjmp	.+58     	; 0x1166 <Sumo_search+0x84>
            }
            break;
        }
        /* ${AOs::Sumo::SM::combat::normal::search::RIGHT} */
        case RIGHT_SIG: {
            BSP_TurnSpeed(Q_PAR(me), RIGHT);
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	8f 81       	ldd	r24, Y+7	; 0x07
    1130:	0e 94 d7 00 	call	0x1ae	; 0x1ae <BSP_TurnSpeed>
            /* ${AOs::Sumo::SM::combat::normal::search::RIGHT::[too_close]} */
            if (Q_PAR(me) > 51) {
    1134:	8f 81       	ldd	r24, Y+7	; 0x07
    1136:	84 33       	cpi	r24, 0x34	; 52
    1138:	30 f0       	brcs	.+12     	; 0x1146 <Sumo_search+0x64>
                status_ = Q_TRAN(&Sumo_evade_right);
    113a:	86 eb       	ldi	r24, 0xB6	; 182
    113c:	98 e0       	ldi	r25, 0x08	; 8
    113e:	9d 83       	std	Y+5, r25	; 0x05
    1140:	8c 83       	std	Y+4, r24	; 0x04
    1142:	88 e0       	ldi	r24, 0x08	; 8
    1144:	10 c0       	rjmp	.+32     	; 0x1166 <Sumo_search+0x84>
            }
            /* ${AOs::Sumo::SM::combat::normal::search::RIGHT::[else]} */
            else {
                BSP_TurnSpeed(Q_PAR(me), RIGHT);
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	0e 94 d7 00 	call	0x1ae	; 0x1ae <BSP_TurnSpeed>
                status_ = Q_HANDLED();
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	0b c0       	rjmp	.+22     	; 0x1166 <Sumo_search+0x84>
            }
            break;
        }
        /* ${AOs::Sumo::SM::combat::normal::search::FRONT} */
        case FRONT_SIG: {
            status_ = Q_TRAN(&Sumo_attack);
    1150:	82 e5       	ldi	r24, 0x52	; 82
    1152:	98 e0       	ldi	r25, 0x08	; 8
    1154:	9d 83       	std	Y+5, r25	; 0x05
    1156:	8c 83       	std	Y+4, r24	; 0x04
    1158:	88 e0       	ldi	r24, 0x08	; 8
            break;
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <Sumo_search+0x84>
        }
        default: {
            status_ = Q_SUPER(&Sumo_normal);
    115c:	82 ef       	ldi	r24, 0xF2	; 242
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	9d 83       	std	Y+5, r25	; 0x05
    1162:	8c 83       	std	Y+4, r24	; 0x04
    1164:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <Sumo_evade_right>:
    return status_;
}
/*${AOs::Sumo::SM::combat::normal::evade::evade_right} .....................*/
QState Sumo_evade_right(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    116c:	fc 01       	movw	r30, r24
    116e:	26 81       	ldd	r18, Z+6	; 0x06
    1170:	21 30       	cpi	r18, 0x01	; 1
    1172:	21 f4       	brne	.+8      	; 0x117c <Sumo_evade_right+0x10>
        /* ${AOs::Sumo::SM::combat::normal::evade::evade_right} */
        case Q_ENTRY_SIG: {
            BSP_TurnRight();
    1174:	0e 94 c7 00 	call	0x18e	; 0x18e <BSP_TurnRight>
            status_ = Q_HANDLED();
    1178:	83 e0       	ldi	r24, 0x03	; 3
            break;
    117a:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_evade);
    117c:	2b e0       	ldi	r18, 0x0B	; 11
    117e:	38 e0       	ldi	r19, 0x08	; 8
    1180:	fc 01       	movw	r30, r24
    1182:	35 83       	std	Z+5, r19	; 0x05
    1184:	24 83       	std	Z+4, r18	; 0x04
    1186:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    1188:	08 95       	ret

0000118a <Sumo_evade_left>:
/*${AOs::Sumo::SM::combat::normal::evade::evade_left} ......................*/
QState Sumo_evade_left(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    118a:	fc 01       	movw	r30, r24
    118c:	26 81       	ldd	r18, Z+6	; 0x06
    118e:	21 30       	cpi	r18, 0x01	; 1
    1190:	21 f4       	brne	.+8      	; 0x119a <Sumo_evade_left+0x10>
        /* ${AOs::Sumo::SM::combat::normal::evade::evade_left} */
        case Q_ENTRY_SIG: {
            BSP_TurnLeft();
    1192:	0e 94 cf 00 	call	0x19e	; 0x19e <BSP_TurnLeft>
            status_ = Q_HANDLED();
    1196:	83 e0       	ldi	r24, 0x03	; 3
            break;
    1198:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_evade);
    119a:	2b e0       	ldi	r18, 0x0B	; 11
    119c:	38 e0       	ldi	r19, 0x08	; 8
    119e:	fc 01       	movw	r30, r24
    11a0:	35 83       	std	Z+5, r19	; 0x05
    11a2:	24 83       	std	Z+4, r18	; 0x04
    11a4:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    11a6:	08 95       	ret

000011a8 <Sumo_evaded>:
    return status_;
}
/*${AOs::Sumo::SM::combat::normal::evaded} .................................*/
QState Sumo_evaded(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    11a8:	fc 01       	movw	r30, r24
    11aa:	26 81       	ldd	r18, Z+6	; 0x06
    11ac:	2e 30       	cpi	r18, 0x0E	; 14
    11ae:	28 f4       	brcc	.+10     	; 0x11ba <Sumo_evaded+0x12>
    11b0:	2b 30       	cpi	r18, 0x0B	; 11
    11b2:	60 f4       	brcc	.+24     	; 0x11cc <Sumo_evaded+0x24>
    11b4:	21 30       	cpi	r18, 0x01	; 1
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <Sumo_evaded+0x18>
    11b8:	10 c0       	rjmp	.+32     	; 0x11da <Sumo_evaded+0x32>
    11ba:	20 31       	cpi	r18, 0x10	; 16
    11bc:	39 f0       	breq	.+14     	; 0x11cc <Sumo_evaded+0x24>
    11be:	0d c0       	rjmp	.+26     	; 0x11da <Sumo_evaded+0x32>
        /* ${AOs::Sumo::SM::combat::normal::evaded} */
        case Q_ENTRY_SIG: {
            BSP_SetTimer1(500);
    11c0:	84 ef       	ldi	r24, 0xF4	; 244
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 91 00 	call	0x122	; 0x122 <BSP_SetTimer1>
            status_ = Q_HANDLED();
    11c8:	83 e0       	ldi	r24, 0x03	; 3
            break;
    11ca:	08 95       	ret
        /* ${AOs::Sumo::SM::combat::normal::evaded::TIMER1OVF, RIGHT, LEFT, FRONT} */
        case TIMER1OVF_SIG: /* intentionally fall through */
        case RIGHT_SIG: /* intentionally fall through */
        case LEFT_SIG: /* intentionally fall through */
        case FRONT_SIG: {
            status_ = Q_TRAN(&Sumo_search);
    11cc:	21 e7       	ldi	r18, 0x71	; 113
    11ce:	38 e0       	ldi	r19, 0x08	; 8
    11d0:	fc 01       	movw	r30, r24
    11d2:	35 83       	std	Z+5, r19	; 0x05
    11d4:	24 83       	std	Z+4, r18	; 0x04
    11d6:	88 e0       	ldi	r24, 0x08	; 8
            break;
    11d8:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_normal);
    11da:	22 ef       	ldi	r18, 0xF2	; 242
    11dc:	37 e0       	ldi	r19, 0x07	; 7
    11de:	fc 01       	movw	r30, r24
    11e0:	35 83       	std	Z+5, r19	; 0x05
    11e2:	24 83       	std	Z+4, r18	; 0x04
    11e4:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    11e6:	08 95       	ret

000011e8 <Sumo_is_back>:
    return status_;
}
/*${AOs::Sumo::SM::combat::start::is_back} .................................*/
QState Sumo_is_back(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    11e8:	fc 01       	movw	r30, r24
    11ea:	26 81       	ldd	r18, Z+6	; 0x06
    11ec:	21 30       	cpi	r18, 0x01	; 1
    11ee:	41 f4       	brne	.+16     	; 0x1200 <Sumo_is_back+0x18>
        /* ${AOs::Sumo::SM::combat::start::is_back} */
        case Q_ENTRY_SIG: {
            BSP_TurnLeft();
    11f0:	0e 94 cf 00 	call	0x19e	; 0x19e <BSP_TurnLeft>
            BSP_SetTimer1(1000);
    11f4:	88 ee       	ldi	r24, 0xE8	; 232
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	0e 94 91 00 	call	0x122	; 0x122 <BSP_SetTimer1>
            status_ = Q_HANDLED();
    11fc:	83 e0       	ldi	r24, 0x03	; 3
            break;
    11fe:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_start);
    1200:	2c e2       	ldi	r18, 0x2C	; 44
    1202:	38 e0       	ldi	r19, 0x08	; 8
    1204:	fc 01       	movw	r30, r24
    1206:	35 83       	std	Z+5, r19	; 0x05
    1208:	24 83       	std	Z+4, r18	; 0x04
    120a:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    120c:	08 95       	ret

0000120e <Sumo_is_left>:
/*${AOs::Sumo::SM::combat::start::is_left} .................................*/
QState Sumo_is_left(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    120e:	fc 01       	movw	r30, r24
    1210:	26 81       	ldd	r18, Z+6	; 0x06
    1212:	21 30       	cpi	r18, 0x01	; 1
    1214:	41 f4       	brne	.+16     	; 0x1226 <Sumo_is_left+0x18>
        /* ${AOs::Sumo::SM::combat::start::is_left} */
        case Q_ENTRY_SIG: {
            BSP_TurnLeft();
    1216:	0e 94 cf 00 	call	0x19e	; 0x19e <BSP_TurnLeft>
            BSP_SetTimer1(660);
    121a:	84 e9       	ldi	r24, 0x94	; 148
    121c:	92 e0       	ldi	r25, 0x02	; 2
    121e:	0e 94 91 00 	call	0x122	; 0x122 <BSP_SetTimer1>
            status_ = Q_HANDLED();
    1222:	83 e0       	ldi	r24, 0x03	; 3
            break;
    1224:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_start);
    1226:	2c e2       	ldi	r18, 0x2C	; 44
    1228:	38 e0       	ldi	r19, 0x08	; 8
    122a:	fc 01       	movw	r30, r24
    122c:	35 83       	std	Z+5, r19	; 0x05
    122e:	24 83       	std	Z+4, r18	; 0x04
    1230:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    1232:	08 95       	ret

00001234 <Sumo_is_right>:
/*${AOs::Sumo::SM::combat::start::is_right} ................................*/
QState Sumo_is_right(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    1234:	fc 01       	movw	r30, r24
    1236:	26 81       	ldd	r18, Z+6	; 0x06
    1238:	21 30       	cpi	r18, 0x01	; 1
    123a:	41 f4       	brne	.+16     	; 0x124c <Sumo_is_right+0x18>
        /* ${AOs::Sumo::SM::combat::start::is_right} */
        case Q_ENTRY_SIG: {
            BSP_TurnRight();
    123c:	0e 94 c7 00 	call	0x18e	; 0x18e <BSP_TurnRight>
            BSP_SetTimer1(660);
    1240:	84 e9       	ldi	r24, 0x94	; 148
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	0e 94 91 00 	call	0x122	; 0x122 <BSP_SetTimer1>
            status_ = Q_HANDLED();
    1248:	83 e0       	ldi	r24, 0x03	; 3
            break;
    124a:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_start);
    124c:	2c e2       	ldi	r18, 0x2C	; 44
    124e:	38 e0       	ldi	r19, 0x08	; 8
    1250:	fc 01       	movw	r30, r24
    1252:	35 83       	std	Z+5, r19	; 0x05
    1254:	24 83       	std	Z+4, r18	; 0x04
    1256:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    1258:	08 95       	ret

0000125a <Sumo_turn>:
/*${AOs::Sumo::SM::combat::turn} ...........................................*/
QState Sumo_turn(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    125a:	fc 01       	movw	r30, r24
    125c:	26 81       	ldd	r18, Z+6	; 0x06
    125e:	2e 30       	cpi	r18, 0x0E	; 14
    1260:	38 f4       	brcc	.+14     	; 0x1270 <Sumo_turn+0x16>
    1262:	2b 30       	cpi	r18, 0x0B	; 11
    1264:	d8 f4       	brcc	.+54     	; 0x129c <Sumo_turn+0x42>
    1266:	21 30       	cpi	r18, 0x01	; 1
    1268:	31 f0       	breq	.+12     	; 0x1276 <Sumo_turn+0x1c>
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	99 f0       	breq	.+38     	; 0x1294 <Sumo_turn+0x3a>
    126e:	1d c0       	rjmp	.+58     	; 0x12aa <Sumo_turn+0x50>
    1270:	20 31       	cpi	r18, 0x10	; 16
    1272:	a1 f0       	breq	.+40     	; 0x129c <Sumo_turn+0x42>
    1274:	1a c0       	rjmp	.+52     	; 0x12aa <Sumo_turn+0x50>
        /* ${AOs::Sumo::SM::combat::turn} */
        case Q_ENTRY_SIG: {
            if (me->last_edge == 0x01) {
    1276:	fc 01       	movw	r30, r24
    1278:	81 89       	ldd	r24, Z+17	; 0x11
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	19 f4       	brne	.+6      	; 0x1284 <Sumo_turn+0x2a>
                BSP_TurnRight();
    127e:	0e 94 c7 00 	call	0x18e	; 0x18e <BSP_TurnRight>
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <Sumo_turn+0x2e>
            }
            else {
                BSP_TurnLeft();
    1284:	0e 94 cf 00 	call	0x19e	; 0x19e <BSP_TurnLeft>
            }
            BSP_SetTimer1(500);
    1288:	84 ef       	ldi	r24, 0xF4	; 244
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	0e 94 91 00 	call	0x122	; 0x122 <BSP_SetTimer1>
            status_ = Q_HANDLED();
    1290:	83 e0       	ldi	r24, 0x03	; 3
            break;
    1292:	08 95       	ret
        }
        /* ${AOs::Sumo::SM::combat::turn} */
        case Q_EXIT_SIG: {
            BSP_Stop();
    1294:	0e 94 ae 00 	call	0x15c	; 0x15c <BSP_Stop>
            status_ = Q_HANDLED();
    1298:	83 e0       	ldi	r24, 0x03	; 3
            break;
    129a:	08 95       	ret
        /* ${AOs::Sumo::SM::combat::turn::TIMER1OVF, FRONT, RIGHT, LEFT} */
        case TIMER1OVF_SIG: /* intentionally fall through */
        case FRONT_SIG: /* intentionally fall through */
        case RIGHT_SIG: /* intentionally fall through */
        case LEFT_SIG: {
            status_ = Q_TRAN(&Sumo_normal);
    129c:	22 ef       	ldi	r18, 0xF2	; 242
    129e:	37 e0       	ldi	r19, 0x07	; 7
    12a0:	fc 01       	movw	r30, r24
    12a2:	35 83       	std	Z+5, r19	; 0x05
    12a4:	24 83       	std	Z+4, r18	; 0x04
    12a6:	88 e0       	ldi	r24, 0x08	; 8
            break;
    12a8:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_combat);
    12aa:	27 ea       	ldi	r18, 0xA7	; 167
    12ac:	37 e0       	ldi	r19, 0x07	; 7
    12ae:	fc 01       	movw	r30, r24
    12b0:	35 83       	std	Z+5, r19	; 0x05
    12b2:	24 83       	std	Z+4, r18	; 0x04
    12b4:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    12b6:	08 95       	ret

000012b8 <Sumo_read>:
        }
    }
    return status_;
}
/*${AOs::Sumo::SM::combat::start::read} ....................................*/
QState Sumo_read(Sumo * const me) {
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
    QState status_;
    switch (Q_SIG(me)) {
    12be:	8e 81       	ldd	r24, Y+6	; 0x06
    12c0:	8b 30       	cpi	r24, 0x0B	; 11
    12c2:	21 f1       	breq	.+72     	; 0x130c <Sumo_read+0x54>
    12c4:	18 f4       	brcc	.+6      	; 0x12cc <Sumo_read+0x14>
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	31 f0       	breq	.+12     	; 0x12d6 <Sumo_read+0x1e>
    12ca:	2c c0       	rjmp	.+88     	; 0x1324 <Sumo_read+0x6c>
    12cc:	8d 30       	cpi	r24, 0x0D	; 13
    12ce:	c1 f0       	breq	.+48     	; 0x1300 <Sumo_read+0x48>
    12d0:	8e 30       	cpi	r24, 0x0E	; 14
    12d2:	11 f1       	breq	.+68     	; 0x1318 <Sumo_read+0x60>
    12d4:	27 c0       	rjmp	.+78     	; 0x1324 <Sumo_read+0x6c>
        /* ${AOs::Sumo::SM::combat::start::read} */
        case Q_ENTRY_SIG: {
            BSP_ReadMode(me);
    12d6:	ce 01       	movw	r24, r28
    12d8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <BSP_ReadMode>
            if (BSP_ReadOpSensors(me)) {
    12dc:	ce 01       	movw	r24, r28
    12de:	0e 94 00 01 	call	0x200	; 0x200 <BSP_ReadOpSensors>
    12e2:	88 23       	and	r24, r24
    12e4:	29 f1       	breq	.+74     	; 0x1330 <Sumo_read+0x78>
                QACTIVE_POST(&(me->super), BACK_SIG, 0);
    12e6:	e8 81       	ld	r30, Y
    12e8:	f9 81       	ldd	r31, Y+1	; 0x01
    12ea:	04 80       	ldd	r0, Z+4	; 0x04
    12ec:	f5 81       	ldd	r31, Z+5	; 0x05
    12ee:	e0 2d       	mov	r30, r0
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	4e e0       	ldi	r20, 0x0E	; 14
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	6f ef       	ldi	r22, 0xFF	; 255
    12f8:	ce 01       	movw	r24, r28
    12fa:	09 95       	icall
            }
            status_ = Q_HANDLED();
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	19 c0       	rjmp	.+50     	; 0x1332 <Sumo_read+0x7a>
            break;
        }
        /* ${AOs::Sumo::SM::combat::start::read::RIGHT} */
        case RIGHT_SIG: {
            status_ = Q_TRAN(&Sumo_is_right);
    1300:	8a e1       	ldi	r24, 0x1A	; 26
    1302:	99 e0       	ldi	r25, 0x09	; 9
    1304:	9d 83       	std	Y+5, r25	; 0x05
    1306:	8c 83       	std	Y+4, r24	; 0x04
    1308:	88 e0       	ldi	r24, 0x08	; 8
            break;
    130a:	13 c0       	rjmp	.+38     	; 0x1332 <Sumo_read+0x7a>
        }
        /* ${AOs::Sumo::SM::combat::start::read::LEFT} */
        case LEFT_SIG: {
            status_ = Q_TRAN(&Sumo_is_left);
    130c:	87 e0       	ldi	r24, 0x07	; 7
    130e:	99 e0       	ldi	r25, 0x09	; 9
    1310:	9d 83       	std	Y+5, r25	; 0x05
    1312:	8c 83       	std	Y+4, r24	; 0x04
    1314:	88 e0       	ldi	r24, 0x08	; 8
            break;
    1316:	0d c0       	rjmp	.+26     	; 0x1332 <Sumo_read+0x7a>
        }
        /* ${AOs::Sumo::SM::combat::start::read::BACK} */
        case BACK_SIG: {
            status_ = Q_TRAN(&Sumo_is_back);
    1318:	84 ef       	ldi	r24, 0xF4	; 244
    131a:	98 e0       	ldi	r25, 0x08	; 8
    131c:	9d 83       	std	Y+5, r25	; 0x05
    131e:	8c 83       	std	Y+4, r24	; 0x04
    1320:	88 e0       	ldi	r24, 0x08	; 8
            break;
    1322:	07 c0       	rjmp	.+14     	; 0x1332 <Sumo_read+0x7a>
        }
        default: {
            status_ = Q_SUPER(&Sumo_start);
    1324:	8c e2       	ldi	r24, 0x2C	; 44
    1326:	98 e0       	ldi	r25, 0x08	; 8
    1328:	9d 83       	std	Y+5, r25	; 0x05
    132a:	8c 83       	std	Y+4, r24	; 0x04
    132c:	80 e0       	ldi	r24, 0x00	; 0
            break;
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <Sumo_read+0x7a>
        case Q_ENTRY_SIG: {
            BSP_ReadMode(me);
            if (BSP_ReadOpSensors(me)) {
                QACTIVE_POST(&(me->super), BACK_SIG, 0);
            }
            status_ = Q_HANDLED();
    1330:	83 e0       	ldi	r24, 0x03	; 3
            status_ = Q_SUPER(&Sumo_start);
            break;
        }
    }
    return status_;
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <Sumo_back>:
        }
    }
    return status_;
}
/*${AOs::Sumo::SM::edge::back} .............................................*/
QState Sumo_back(Sumo * const me) {
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	ec 01       	movw	r28, r24
    QState status_;
    switch (Q_SIG(me)) {
    133e:	8e 81       	ldd	r24, Y+6	; 0x06
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	19 f0       	breq	.+6      	; 0x134a <Sumo_back+0x12>
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	69 f0       	breq	.+26     	; 0x1362 <Sumo_back+0x2a>
    1348:	12 c0       	rjmp	.+36     	; 0x136e <Sumo_back+0x36>
        /* ${AOs::Sumo::SM::edge::back} */
        case Q_ENTRY_SIG: {
            BSP_GoBack();
    134a:	0e 94 be 00 	call	0x17c	; 0x17c <BSP_GoBack>
            QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);
    134e:	24 e6       	ldi	r18, 0x64	; 100
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	44 e6       	ldi	r20, 0x64	; 100
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <QActive_armX>
            status_ = Q_HANDLED();
    135e:	83 e0       	ldi	r24, 0x03	; 3
            break;
    1360:	0b c0       	rjmp	.+22     	; 0x1378 <Sumo_back+0x40>
        }
        /* ${AOs::Sumo::SM::edge::back::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&Sumo_strafe);
    1362:	8f eb       	ldi	r24, 0xBF	; 191
    1364:	99 e0       	ldi	r25, 0x09	; 9
    1366:	9d 83       	std	Y+5, r25	; 0x05
    1368:	8c 83       	std	Y+4, r24	; 0x04
    136a:	88 e0       	ldi	r24, 0x08	; 8
            break;
    136c:	05 c0       	rjmp	.+10     	; 0x1378 <Sumo_back+0x40>
        }
        default: {
            status_ = Q_SUPER(&Sumo_edge);
    136e:	8f e3       	ldi	r24, 0x3F	; 63
    1370:	97 e0       	ldi	r25, 0x07	; 7
    1372:	9d 83       	std	Y+5, r25	; 0x05
    1374:	8c 83       	std	Y+4, r24	; 0x04
    1376:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <Sumo_strafe>:
/*${AOs::Sumo::SM::edge::strafe} ...........................................*/
QState Sumo_strafe(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
    137e:	fc 01       	movw	r30, r24
    1380:	26 81       	ldd	r18, Z+6	; 0x06
    1382:	21 30       	cpi	r18, 0x01	; 1
    1384:	21 f4       	brne	.+8      	; 0x138e <Sumo_strafe+0x10>
        /* ${AOs::Sumo::SM::edge::strafe} */
        case Q_ENTRY_SIG: {
            BSP_GoBack();
    1386:	0e 94 be 00 	call	0x17c	; 0x17c <BSP_GoBack>
            status_ = Q_HANDLED();
    138a:	83 e0       	ldi	r24, 0x03	; 3
            break;
    138c:	08 95       	ret
        }
        default: {
            status_ = Q_SUPER(&Sumo_edge);
    138e:	2f e3       	ldi	r18, 0x3F	; 63
    1390:	37 e0       	ldi	r19, 0x07	; 7
    1392:	fc 01       	movw	r30, r24
    1394:	35 83       	std	Z+5, r19	; 0x05
    1396:	24 83       	std	Z+4, r18	; 0x04
    1398:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    return status_;
}
    139a:	08 95       	ret

0000139c <Sumo_initial>:

/*${AOs::Sumo} .............................................................*/
/*${AOs::Sumo::SM} .........................................................*/
QState Sumo_initial(Sumo * const me) {
    /* ${AOs::Sumo::SM::initial} */
    return Q_TRAN(&Sumo_wait);
    139c:	2b e5       	ldi	r18, 0x5B	; 91
    139e:	37 e0       	ldi	r19, 0x07	; 7
    13a0:	fc 01       	movw	r30, r24
    13a2:	35 83       	std	Z+5, r19	; 0x05
    13a4:	24 83       	std	Z+4, r18	; 0x04
}
    13a6:	88 e0       	ldi	r24, 0x08	; 8
    13a8:	08 95       	ret

000013aa <_exit>:
    13aa:	f8 94       	cli

000013ac <__stop_program>:
    13ac:	ff cf       	rjmp	.-2      	; 0x13ac <__stop_program>
