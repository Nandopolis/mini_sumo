/*****************************************************************************
* Model: mini_sumo.qm
* File:  ./sumo.h
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::sumo.h} .............................................................*/
#ifndef sumo_h
#define sumo_h

#include "qpn.h"

enum SumoSignals {
    BUTTON_SIG = Q_USER_SIG,
    EDGE_SIG,
    INSIDE_SIG,
    LEFT_SIG,
    FRONT_SIG,
    RIGHT_SIG,
    BACK_SIG,
    LOST_SIG,
    TIMER1OVF_SIG,
};

//============================================================================
// declare all AO classes...

#if ((QP_VERSION < 591) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 5.9.1 or higher required
#endif

/*${AOs::Sumo} .............................................................*/
typedef struct Sumo {
/* protected: */
    QActive super;

/* private: */
    int8_t combat_mode;
    uint8_t last_edge;
    uint8_t attacking;
} Sumo;

/* protected: */
QState Sumo_initial(Sumo * const me);
QState Sumo_wait(Sumo * const me);
QState Sumo_hold(Sumo * const me);
QState Sumo_combat(Sumo * const me);
QState Sumo_normal(Sumo * const me);
QState Sumo_search(Sumo * const me);
QState Sumo_evade(Sumo * const me);
QState Sumo_evade_right(Sumo * const me);
QState Sumo_evade_left(Sumo * const me);
QState Sumo_attack(Sumo * const me);
QState Sumo_evaded(Sumo * const me);
QState Sumo_start(Sumo * const me);
QState Sumo_read(Sumo * const me);
QState Sumo_is_back(Sumo * const me);
QState Sumo_is_left(Sumo * const me);
QState Sumo_is_right(Sumo * const me);
QState Sumo_turn(Sumo * const me);
QState Sumo_edge(Sumo * const me);
QState Sumo_back(Sumo * const me);
QState Sumo_strafe(Sumo * const me);

//...

#endif /* sumo_h */
